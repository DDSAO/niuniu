[{"D:\\niuniu\\niu-ts\\my-app\\src\\index.tsx":"1","D:\\niuniu\\niu-ts\\my-app\\src\\reportWebVitals.ts":"2","D:\\niuniu\\niu-ts\\my-app\\src\\App.tsx":"3","D:\\niuniu\\niu-ts\\my-app\\src\\redux\\index.ts":"4","D:\\niuniu\\niu-ts\\my-app\\src\\redux\\reducer.ts":"5","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Main.tsx":"6","D:\\niuniu\\niu-ts\\my-app\\src\\views\\CurrentPage.tsx":"7","D:\\niuniu\\niu-ts\\my-app\\src\\component\\NavBar\\NavBar.tsx":"8","D:\\niuniu\\niu-ts\\my-app\\src\\component\\NavBar\\NavRow.tsx":"9","D:\\niuniu\\niu-ts\\my-app\\src\\views\\AddStudent.tsx":"10","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Course.tsx":"11","D:\\niuniu\\niu-ts\\my-app\\src\\views\\NoMatch.tsx":"12","D:\\niuniu\\niu-ts\\my-app\\src\\views\\StudentManagement.tsx":"13","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Schedule.tsx":"14","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Setting.tsx":"15","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Notification.tsx":"16","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Dashboard.tsx":"17","D:\\niuniu\\niu-ts\\my-app\\src\\redux\\actions.ts":"18","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Form\\EmptyStudentInfo.tsx":"19","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Table\\StudentTable.tsx":"20","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Dialog\\CreateEvent.tsx":"21","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Dialog\\EditEvent.tsx":"22","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Form\\StudentInfo.tsx":"23","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Table\\CourseInfo.tsx":"24","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Table\\NotificationTable.tsx":"25","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Graph\\TextWithGraph.tsx":"26","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Button\\ThreeDButton.tsx":"27","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Counter\\SimpleCounter.tsx":"28"},{"size":811,"mtime":1607470653874,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":936,"mtime":1607470489837,"results":"32","hashOfConfig":"30"},{"size":232,"mtime":1607319553117,"results":"33","hashOfConfig":"30"},{"size":5483,"mtime":1611214397514,"results":"34","hashOfConfig":"30"},{"size":1103,"mtime":1607408744193,"results":"35","hashOfConfig":"30"},{"size":1005,"mtime":1607408645217,"results":"36","hashOfConfig":"30"},{"size":6063,"mtime":1607988357050,"results":"37","hashOfConfig":"30"},{"size":1393,"mtime":1607316626274,"results":"38","hashOfConfig":"30"},{"size":830,"mtime":1607400437510,"results":"39","hashOfConfig":"30"},{"size":1728,"mtime":1611214628376,"results":"40","hashOfConfig":"30"},{"size":108,"mtime":1607402597338,"results":"41","hashOfConfig":"30"},{"size":2379,"mtime":1607494745187,"results":"42","hashOfConfig":"30"},{"size":6932,"mtime":1607993718628,"results":"43","hashOfConfig":"30"},{"size":1316,"mtime":1608079264589,"results":"44","hashOfConfig":"30"},{"size":6855,"mtime":1607988262678,"results":"45","hashOfConfig":"30"},{"size":1411,"mtime":1608279878000,"results":"46","hashOfConfig":"30"},{"size":4381,"mtime":1611214390232,"results":"47","hashOfConfig":"30"},{"size":6241,"mtime":1607319149216,"results":"48","hashOfConfig":"30"},{"size":3491,"mtime":1607492766458,"results":"49","hashOfConfig":"30"},{"size":14982,"mtime":1607993096883,"results":"50","hashOfConfig":"30"},{"size":18081,"mtime":1607479631273,"results":"51","hashOfConfig":"30"},{"size":6461,"mtime":1607319291088,"results":"52","hashOfConfig":"30"},{"size":10395,"mtime":1607491651214,"results":"53","hashOfConfig":"30"},{"size":5171,"mtime":1608077891425,"results":"54","hashOfConfig":"30"},{"size":4228,"mtime":1608958423605,"results":"55","hashOfConfig":"30"},{"size":2457,"mtime":1611215051635,"results":"56","hashOfConfig":"30"},{"size":2340,"mtime":1611215002956,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"b7tvt5",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"60"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\niuniu\\niu-ts\\my-app\\src\\index.tsx",[],["131","132"],"D:\\niuniu\\niu-ts\\my-app\\src\\reportWebVitals.ts",[],"D:\\niuniu\\niu-ts\\my-app\\src\\App.tsx",["133","134"],"import React, { useRef, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Main } from './views/Main';\nimport { SnackbarProvider } from 'notistack';\nimport { Button } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { initData } from './redux/actions';\n\n\nconst App : React.FC = () => {\n  const dispatch = useDispatch()\n  const notistackRef = useRef<any>(null)\n  const onClickDismiss = (key:string) => () => { \n    if (notistackRef) {\n      notistackRef.current.closeSnackbar(key);\n    }\n  }\n  useEffect(()=>{\n    dispatch(initData())\n  }, [])\n  return (\n    <div className=\"App\">\n      <SnackbarProvider\n      ref={notistackRef}\n      action={(key: string) => (\n        <Button style={{color:\"white\"}} onClick={onClickDismiss(key)}>\n          好的\n        </Button>\n      )}\n      >\n        <Main />\n      </SnackbarProvider>\n      \n    </div>\n  );\n}\n\nexport default App;\n","D:\\niuniu\\niu-ts\\my-app\\src\\redux\\index.ts",["135"],"import { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport  { reducer }  from './reducer'\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\n\r\nexport const store = createStore(reducer, compose(applyMiddleware(thunk)))","D:\\niuniu\\niu-ts\\my-app\\src\\redux\\reducer.ts",["136","137"],"D:\\niuniu\\niu-ts\\my-app\\src\\views\\Main.tsx",[],"D:\\niuniu\\niu-ts\\my-app\\src\\views\\CurrentPage.tsx",[],"D:\\niuniu\\niu-ts\\my-app\\src\\component\\NavBar\\NavBar.tsx",["138"],"import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\n\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport NavRow from './NavRow';\r\nimport { Badge, Container } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { IState, INotifications } from './../../redux/types';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    \r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n    [theme.breakpoints.down('xs')] : {\r\n      padding: 0,\r\n      margin:0,\r\n    }\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.down('xs')]: {\r\n      width: 0\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  titleBar: {\r\n    padding: theme.spacing(0, 2),\r\n  },\r\n  BgPink: {\r\n    background: theme.palette.error.light,\r\n  },\r\n  BgBlue: {\r\n    background: theme.palette.info.light,\r\n  }\r\n}));\r\n\r\nconst NavBar = () => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [newNotiCount, setNewNotiCount] = useState(0)\r\n\r\n  const handleDrawerOpen = () => setOpen(true);\r\n  const handleDrawerClose = () => setOpen(false);\r\n\r\n  const allNotifications = useSelector((state: IState): INotifications => state.notifications)\r\n\r\n  useEffect(() => {\r\n    \r\n    let newCount = 0\r\n    Object.entries(allNotifications).forEach(([category,notifications]: Array<keyof INotifications | INotifications>) => {\r\n      if (Array.isArray(notifications)) {\r\n          notifications.forEach((noti) => {\r\n            if (noti.isNew) newCount += 1\r\n          })\r\n      } \r\n    })\r\n    setNewNotiCount(newCount)\r\n  }, [allNotifications])\r\n  return (\r\n    <Container fixed className={clsx(classes.drawer, {\r\n      [classes.drawerOpen]: open,\r\n      [classes.drawerClose]: !open,\r\n    })}>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar className={clsx(classes.titleBar, classes.BgPink)}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            牛牛管理界面\r\n          </Typography>\r\n          \r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={clsx(classes.toolbar)}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <NavRow to=\"course\" text=\"课程安排\"><MenuBookIcon /></NavRow>\r\n          <NavRow to=\"addstudent\" text=\"添加学生\"><PersonAddIcon /></NavRow>\r\n          <NavRow to=\"studentmanagement\" text=\"学生管理\"><AssignmentIndIcon /></NavRow>\r\n          <NavRow to=\"schedule\" text=\"课程安排\"><EventNoteIcon /></NavRow>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          <NavRow to=\"notification\" text=\"提醒\"><Badge badgeContent={newNotiCount} max={99} color=\"primary\"><NotificationsNoneIcon /></Badge></NavRow>\r\n          <NavRow to=\"setting\" text=\"设置\"><SettingsIcon /></NavRow>\r\n          <NavRow to=\"dashboard\" text=\"统计\"><TrendingUpIcon /></NavRow>\r\n        </List>\r\n      </Drawer>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NavBar\r\n","D:\\niuniu\\niu-ts\\my-app\\src\\component\\NavBar\\NavRow.tsx",["139","140","141"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport  ListItem  from '@material-ui/core/ListItem';\r\nimport  ListItemIcon  from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText  from '@material-ui/core/ListItemText';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navBarRow: {\r\n        textDecoration: \"none\",\r\n        color: \"black\",\r\n        '&:hover .navBarRow': {\r\n            backgroundColor: \"rgba(247, 132, 115, 0.7)\",\r\n        }\r\n    },\r\n    activeRow: {\r\n        '& .navBarRow' :{\r\n            textDecoration: \"none\",\r\n            backgroundColor: \"rgba(247, 132, 115, 0.5)\",\r\n        }\r\n        \r\n    }\r\n}))\r\n\r\nconst NavRow = (props: {text: string, to: string, children?:any}) => {\r\n    const classes = useStyles()\r\n    const [isActive, setActive] = useState(false)\r\n    return(\r\n        <NavLink  key={props.text} to={props.to}    \r\n        className={classes.navBarRow} activeClassName={clsx(classes.navBarRow, classes.activeRow)}>\r\n            <ListItem button className=\"navBarRow\">\r\n                <ListItemIcon >{props.children}</ListItemIcon>\r\n                <ListItemText  primary={props.text} />\r\n            </ListItem>\r\n        </NavLink>\r\n        \r\n    )\r\n}\r\n\r\nexport default NavRow","D:\\niuniu\\niu-ts\\my-app\\src\\views\\AddStudent.tsx",["142"],"import { Container, Typography, Toolbar, Divider } from '@material-ui/core';\r\nimport React from 'react';\r\nimport EmptyStudentInfo from '../component/Form/EmptyStudentInfo';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display:\"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    toolbar: {\r\n        width: \"100%\",\r\n        padding: \"10px\",\r\n    }\r\n}))\r\n\r\nconst AddStudent = () => {\r\n    const classes = useStyles()\r\n    return(\r\n        <Container className={classes.root}>\r\n           <Toolbar className={classes.toolbar}>\r\n                <Typography variant=\"h5\">添加学生</Typography>\r\n            </Toolbar>\r\n            <EmptyStudentInfo />\r\n        </Container>\r\n        \r\n    )\r\n}\r\n\r\nexport default AddStudent","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Course.tsx",["143","144"],"D:\\niuniu\\niu-ts\\my-app\\src\\views\\NoMatch.tsx",[],"D:\\niuniu\\niu-ts\\my-app\\src\\views\\StudentManagement.tsx",["145","146","147","148"],"import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx'\r\nimport { Container, InputLabel, OutlinedInput, TextField, Toolbar, FormControl, InputAdornment, FilledInput, IconButton } from '@material-ui/core';\r\nimport StudentTable from '../component/Table/StudentTable';\r\nimport  Typography  from '@material-ui/core/Typography';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { IStudent } from '../redux/types';\r\nimport { useSelector } from 'react-redux';\r\nimport { IState } from './../redux/types';\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        justifyContent: \"space-between\",\r\n        padding: \"10px\",\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n        width: '25ch',\r\n    },\r\n}))\r\n\r\n\r\nconst StudentManagement = () => {\r\n    const classes = useStyles()\r\n    const students = useSelector((state: IState) => state.students)\r\n\r\n    const [filterWord, setFilterWord] = useState(\"\")\r\n\r\n    return(\r\n        <Container>\r\n            <Toolbar className={classes.toolbar}>\r\n                <Typography variant=\"h5\">学生管理</Typography>\r\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\r\n                    <InputLabel htmlFor=\"search-student\">搜索</InputLabel>\r\n                    <FilledInput \r\n                    id=\"search-student\" \r\n                    value={filterWord}\r\n                    onChange={e => setFilterWord(e.target.value)} \r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                            aria-label=\"toggle password visibility\"\r\n                            onClick={()=>setFilterWord(\"\")}\r\n                            edge=\"end\"\r\n                            >\r\n                                <HighlightOffIcon/>\r\n                            </IconButton>\r\n                     \r\n                        </InputAdornment>}\r\n\r\n                    />   \r\n                </FormControl>\r\n                   \r\n            </Toolbar>\r\n            <StudentTable data={students} filterWord={filterWord}/>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default StudentManagement","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Schedule.tsx",["149","150","151","152","153","154","155","156","157"],"import React, { useEffect, useRef } from 'react';\r\n\r\nimport { Calendar } from '@fullcalendar/core';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport interactionPlugin, { Draggable } from '@fullcalendar/interaction';\r\nimport zhLocale from '@fullcalendar/core/locales/zh-cn'\r\nimport { Card, Container, Toolbar, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clearNewEvent, clearSelectedEvent, selectedDate, selectEvent, toggleCreateEventDialog, toggleEditEventDialog, updatedCalendarAfterEdit, updateEventDate } from '../redux/actions';\r\nimport CreateEvent from '../component/Dialog/CreateEvent';\r\nimport EditEvent from '../component/Dialog/EditEvent';\r\nimport { IState, IEvent } from '../redux/types';\r\nimport { updatedCalendarAfterDelete } from './../redux/actions';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        [theme.breakpoints.down('xs')] : {\r\n            width: \"100%\"\r\n        }\r\n    },\r\n    toolbar: {\r\n        justifyContent: \"space-between\",\r\n        padding: \"10px\",\r\n    },\r\n    card: {\r\n        //padding: 10,\r\n    }\r\n}))\r\n\r\nconst Schedule = () => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const event = useSelector((state: IState) => state.newEvent) //new event\r\n    const events = useSelector((state: IState) => state.allEvents) //all event\r\n    const selectedEId = useSelector((state: IState) => state.selectedEId)\r\n    const hasEdittedEvent = useSelector((state: IState) => state.hasEdittedEvent)\r\n    const hasDeletedEvent = useSelector((state: IState) => state.hasDeletedEvent)\r\n    const calendar = useRef<any>(null)\r\n    const container = useRef(null)\r\n\r\n    const parseCalendarEvent = (info: IEvent) => {\r\n        if (info) {\r\n            let title = info.students.length === 0 ? \"未选定学生\" : info.students.length > 1 ? info.students[0] + \" 等\" : info.students[0]\r\n            return {\r\n                id: String(info.id),\r\n                title:　title,\r\n                start: info.year+'-'+info.month+'-'+(info.date < 10 ? '0'+info.date : info.date)+'T'+info.start+':00',\r\n                end: info.year+'-'+info.month+'-'+(info.date < 10 ? '0'+info.date : info.date)+'T'+info.end+':00',\r\n            }\r\n        } else {\r\n            throw \"event info not defined\"\r\n        }\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        console.log(Object.values(events).map((info) => {\r\n            return parseCalendarEvent(info)\r\n        }))\r\n        calendar.current = new Calendar(container.current as unknown as HTMLElement, {\r\n            plugins: [ interactionPlugin, dayGridPlugin, listPlugin],\r\n            dayMaxEventRows: true,\r\n            locale: zhLocale,\r\n            handleWindowResize: false,\r\n            aspectRatio: window.innerWidth < 600 ? 0.4 : window.innerWidth < 960 ? 1.3 : 1.8,\r\n            headerToolbar: {\r\n                start: 'prev,next today', // will normally be on the left. if RTL, will be on the right\r\n                center: 'title',\r\n                end: 'dayGridMonth,list' // will normally be on the right. if RTL, will be on the left\r\n            },\r\n            buttonText: {\r\n                today: \"返回今日\",\r\n                list: \"按列表显示\",\r\n                dayGridMonth: \"按月显示\"\r\n            },\r\n            selectable: true,\r\n            dateClick: ( info ) => {\r\n                dispatch(selectedDate(info.date))\r\n                dispatch(toggleCreateEventDialog())\r\n            },\r\n            editable: true,\r\n            droppable: false,\r\n            eventDrop: (info) => {\r\n                let { event } = info\r\n                if (event && event.start) {\r\n                    let id = parseInt(event.id)\r\n                    let year = event.start.getFullYear()\r\n                    let month = event.start.getMonth() + 1\r\n                    let date = event.start.getDate()\r\n                    dispatch(updateEventDate(id, year, month, date))\r\n                } else {\r\n                    throw \"Cannot find event info\"\r\n                }\r\n            },\r\n            eventClick: (info) => {\r\n                dispatch(selectEvent(parseInt(info.event.id)))\r\n                dispatch(toggleEditEventDialog())\r\n            },\r\n            events: Object.values(events).map((info) => {\r\n                return parseCalendarEvent(info)\r\n            })\r\n        });\r\n        \r\n        window.addEventListener(\"resize\", (e)=>{\r\n            const w = e.target as Window\r\n            if (w.innerWidth < 600) {\r\n                calendar.current.setOption('aspectRatio', 0.4);\r\n            } else if (w.innerWidth < 960) {\r\n                calendar.current.setOption('aspectRatio', 1.3);\r\n            } else {\r\n                calendar.current.setOption('aspectRatio', 1.8);\r\n            }\r\n            calendar.current.updateSize()\r\n                       \r\n        });\r\n        calendar.current.render()   \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (event.updateCalendar) {\r\n            let info = event.eventInfo\r\n            if (info) {\r\n                calendar.current.addEvent(parseCalendarEvent(info))\r\n                dispatch(clearNewEvent())   \r\n            }\r\n             \r\n        }\r\n    }, [event.updateCalendar])\r\n\r\n    useEffect(() => {\r\n        if (hasEdittedEvent.status && hasEdittedEvent.id !== undefined) {\r\n            let oldEvent = calendar.current.getEventById( hasEdittedEvent.id )\r\n            oldEvent.remove()\r\n            let newEvent = events[hasEdittedEvent.id]\r\n            calendar.current.addEvent({\r\n                id: selectedEId,\r\n                title: newEvent.students.length === 0 ? \"未选定学生\" : newEvent.students.length > 1 ? newEvent.students[0] + \" 等\" : newEvent.students[0],\r\n                start: newEvent.year+'-'+newEvent.month+'-'+newEvent.date+'T'+newEvent.start+':00',\r\n                end: newEvent.year+'-'+newEvent.month+'-'+newEvent.date+'T'+newEvent.end+':00',\r\n            })\r\n            calendar.current.refetchEvents()\r\n            dispatch(updatedCalendarAfterEdit())\r\n            \r\n        }\r\n    }, [hasEdittedEvent])\r\n\r\n    useEffect(() => {\r\n        if (hasDeletedEvent.status && hasDeletedEvent.id !== undefined) {\r\n            let oldEvent = calendar.current.getEventById(  hasDeletedEvent.id )\r\n            oldEvent.remove()\r\n            calendar.current.refetchEvents()\r\n            dispatch(updatedCalendarAfterDelete())\r\n        }\r\n    }, [hasDeletedEvent])\r\n\r\n    return(\r\n        <Container className={classes.root} >\r\n            <Toolbar className={classes.toolbar}>\r\n                <Typography variant=\"h5\">课程安排</Typography>\r\n            </Toolbar>\r\n            <div ref={container}></div>\r\n            <CreateEvent />\r\n            <EditEvent />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Schedule","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Setting.tsx",[],"D:\\niuniu\\niu-ts\\my-app\\src\\views\\Notification.tsx",["158","159","160","161","162"],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Typography, Toolbar, Divider, Button } from '@material-ui/core';\r\nimport { useSnackbar } from 'notistack';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { INotification, IState } from '../redux/types';\r\nimport NotificationTable from './../component/Table/NotificationTable';\r\nimport { INotifications, NotificationKeys } from './../redux/types';\r\nimport Schedule from './Schedule';\r\nimport { LabelSharp } from '@material-ui/icons';\r\nimport { addNotification } from '../redux/actions';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display:\"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    tabs: {\r\n        flexGrow: 1,\r\n        width: \"100%\",\r\n    },\r\n    toolbar: {\r\n        width: \"100%\",\r\n        padding: \"10px\",\r\n    },\r\n    box: {\r\n        background: \"grey\",\r\n    },\r\n    noti: {\r\n        display:\"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    notiContent: {\r\n        background: \"white\",\r\n        padding: theme.spacing(1),\r\n        //marginBottom: theme.spacing(1),\r\n        display:\"flex\",\r\n        justifyContent:\"space-between\",\r\n        alignItems:\"center\",\r\n    },\r\n    notiText: {\r\n        textAlign: \"left\",\r\n    },\r\n    notiTime: {\r\n        [theme.breakpoints.down('sm')] :{\r\n            minWidth: \"100px\",\r\n        },\r\n        minWidth: \"150px\",   \r\n    }\r\n}))\r\n\r\nconst TabPanel = (props: {children: JSX.Element|string, value: number, index:number}) => {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3} >\r\n                {children}\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n}\r\n\r\nconst NotificationRow = (props: {text: string, date: Date}) => {\r\n    const classes = useStyles()\r\n    let {text, date} = props\r\n    let timeString\r\n    if (Date.now() - date.getTime() < 60 * 1000) {\r\n        timeString = \"刚刚\"\r\n    } else if (Date.now() - date.getTime() < 60 * 60 * 1000) {\r\n        timeString = Math.round((Date.now() - date.getTime())/60000) + \"分钟前\"\r\n    } else if (Date.now() - date.getTime() < 24 * 60 * 60 * 1000) {\r\n        timeString = Math.round((Date.now() - date.getTime())/(60 * 60000)) + \"小时前\"\r\n    } else {\r\n        timeString = date.getFullYear()+\"年\"+(date.getMonth()+1)+\"月\"+date.getDate()+\"日 \"+date.getHours()+\":\"+(date.getMinutes()<10?'0':'')+date.getMinutes()\r\n    }\r\n\r\n    return (\r\n    <div className={classes.noti}>\r\n        <div className={classes.notiContent}>\r\n            <div className={classes.notiText}>{text}</div>\r\n            <div className={classes.notiTime}>{timeString}</div>\r\n        </div>\r\n        <Divider/>\r\n        \r\n    </div>)\r\n}\r\n\r\n\r\nconst Notification = () => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [value, setValue] = useState(0);\r\n\r\n    const allNotifications = useSelector((state: IState): INotifications => state.notifications)\r\n\r\n    const handleChange = (event:React.ChangeEvent<{}>, newValue:number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const [studentLabel, setStudentLabel] = useState(\"学生\")\r\n    const [scheduleLabel, setScheduleLabel] = useState(\"课程\")\r\n    const [courseHourLabel, setCourseHourLabel] = useState(\"课时\")\r\n    const [practiceLabel, setPracticeLabel] = useState(\"练习\")\r\n    \r\n  \r\n\r\n    useEffect(() => {\r\n        Object.entries(allNotifications).forEach(([category,notifications]: Array<keyof INotifications | INotifications>) => {\r\n            let newCount = 0\r\n            if (Array.isArray(notifications)) {\r\n                notifications.forEach((noti) => {\r\n                    if (noti.isNew) newCount += 1\r\n                })\r\n            }\r\n            if (typeof category === 'string') {\r\n                switch (category) {\r\n                    case \"student\": {\r\n                        newCount > 0 ? setStudentLabel(`学生 (${newCount}条新信息)`) : setStudentLabel(\"学生\")\r\n                        break\r\n                    }\r\n                    case \"schedule\": {\r\n                        newCount > 0 ? setScheduleLabel(`课程 (${newCount}条新信息)`) : setScheduleLabel(\"课程\")\r\n                        break\r\n                    }\r\n                    case \"courseHour\": {\r\n                        newCount > 0 ? setCourseHourLabel(`课时 (${newCount}条新信息)`) : setCourseHourLabel(\"课时\")\r\n                        break\r\n                    }\r\n                    case \"practice\": {\r\n                        newCount > 0 ? setPracticeLabel(`练习 (${newCount}条新信息)`) : setPracticeLabel(\"练习\")\r\n                        break\r\n                    }\r\n                    default: return\r\n                }\r\n            }  \r\n        })\r\n    }, [allNotifications])\r\n\r\n\r\n    return(\r\n    <Container className={classes.root}>\r\n        <Toolbar className={classes.toolbar}>\r\n            <Typography variant=\"h5\">消息提醒</Typography>\r\n        </Toolbar>\r\n        <Paper className={classes.tabs}>\r\n            <Tabs\r\n                value={value}\r\n                onChange={handleChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                centered\r\n                variant=\"fullWidth\"\r\n            >\r\n                <Tab label={studentLabel} />\r\n                <Tab label={scheduleLabel} />\r\n                <Tab label={courseHourLabel} />\r\n                <Tab label={practiceLabel} />\r\n            </Tabs>\r\n            <TabPanel value={value} index={0}>\r\n                <NotificationTable searchWord=\"\" category=\"student\"/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n                <NotificationTable searchWord=\"\" category=\"schedule\"/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2}>\r\n                <NotificationTable searchWord=\"\" category=\"courseHour\"/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={3}>\r\n                <NotificationTable searchWord=\"\" category=\"practice\"/>\r\n            </TabPanel>\r\n        </Paper>\r\n        <Button onClick={() => {\r\n            enqueueSnackbar('I love hooks', {variant: \"success\"})\r\n            dispatch(addNotification(\"一条新消息\",\"student\",\"error\"))\r\n        }}>显示消息</Button>\r\n    </Container>)\r\n}\r\n\r\nexport default Notification","D:\\niuniu\\niu-ts\\my-app\\src\\views\\Dashboard.tsx",[],"D:\\niuniu\\niu-ts\\my-app\\src\\redux\\actions.ts",["163"],"D:\\niuniu\\niu-ts\\my-app\\src\\component\\Form\\EmptyStudentInfo.tsx",["164","165","166","167","168","169","170","171","172"],"import { Button, Card, Grid, Hidden, TextField } from '@material-ui/core';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: grey[100],\r\n    },\r\n    grid: {\r\n        margin: \"16px 0\",\r\n        display:\"flex\",\r\n        justifyContent:\"center\",  \r\n    },\r\n\r\n    fullWidth: {\r\n        width: \"calc(100% - 64px)\",\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    button: {\r\n        width: \"200px\",\r\n    }\r\n  }));\r\n\r\n\r\n\r\nconst EmptyStudentInfo = () => {\r\n    const data = {}\r\n    const classes = useStyles();\r\n    const [name, setName] = useState(\"\")\r\n    const [nameMessage, setNameMessage] = useState( \"请输入您的姓名\")\r\n    const [gender, setGender] = useState<number|undefined>(undefined);\r\n    const [genderMessage, setGenderMessage] = useState(\"请输入您的性别\")\r\n    const [phone, setPhone] = useState(\"\")\r\n    const [phoneMessage, setPhoneMessage] = useState(\"请输入您的手机号码\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [emailMessage, setEmailMessage] = useState(\"请输入您的电子邮箱\")\r\n    const [address, setAddress] = useState(\"\")\r\n    const [addressMessage, setAddressMessage] = useState(\"请输入您的地址\")\r\n    const [year, setYear] = useState<number|undefined>(undefined)\r\n    const [yearMessage, setYearMessage] = useState(\"请输入您的出生年份(xxxx)\")\r\n    const [month, setMonth] = useState<number|undefined>(undefined)\r\n    const [monthMessage, setMonthMessage] = useState(\"请输入您的出生月份\")\r\n    const [date, setDate] = useState<number|undefined>(undefined)\r\n    const [dateMessage, setDateMessage] = useState(\"请输入您的出生日期\")\r\n\r\n    const reset = () => {\r\n        setName(\"\")\r\n        setGender(undefined)\r\n        setPhone(\"\")\r\n        setEmail(\"\")\r\n        setAddress(\"\")\r\n        setYear(undefined)\r\n        setMonth(undefined)\r\n        setDate(undefined)\r\n    }\r\n\r\n    return(\r\n        <Card className={classes.root}>\r\n            <Grid container>\r\n                <Grid item xs={12} sm={12} md={6} className={classes.grid}>\r\n                    <TextField id=\"name\" label=\"姓名\" variant=\"filled\" helperText={nameMessage}\r\n                    onChange={(e)=>setName(e.target.value)} value={name}\r\n                    className={classes.fullWidth}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={6} className={classes.grid}>\r\n                    <TextField\r\n                    id=\"gender\"\r\n                    select\r\n                    label=\"性别\"\r\n                    onChange={(e)=>setGender(parseInt(e.target.value))}\r\n                    value={gender}\r\n                    helperText={genderMessage}\r\n                    variant=\"filled\"\r\n                    className={classes.fullWidth}\r\n                    >\r\n                        <MenuItem key=\"1\" value=\"1\">男生</MenuItem>\r\n                        <MenuItem key=\"0\" value=\"0\">女生</MenuItem>\r\n                    </TextField>\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={6} className={classes.grid}>\r\n                    <TextField id=\"phone\" label=\"手机\" variant=\"filled\" helperText={phoneMessage}\r\n                    className={classes.fullWidth} onChange={(e)=>setPhone(e.target.value)} value={phone}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={6} className={classes.grid}>\r\n                    <TextField id=\"email\" label=\"邮箱\" variant=\"filled\" helperText={emailMessage}\r\n                    className={classes.fullWidth} onChange={(e)=>setEmail(e.target.value)} value={email}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={12} className={classes.grid}>\r\n                    <TextField id=\"address\" label=\"地址\" variant=\"filled\" helperText={addressMessage}\r\n                    className={classes.fullWidth} onChange={(e)=>setAddress(e.target.value)} value={address}/> \r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <TextField id=\"year\" label=\"年\" variant=\"filled\" \r\n                    helperText={yearMessage} type=\"number\" inputProps={{min:\"1900\", max:\"2025\"}} \r\n                    className={classes.fullWidth} onChange={(e)=>setYear(parseInt(e.target.value))} value={year}/> \r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <TextField id=\"month\" label=\"月\" variant=\"filled\" \r\n                    helperText={monthMessage} type=\"number\" inputProps={{min:\"1\", max:\"12\"}} \r\n                    className={classes.fullWidth} onChange={(e)=>setMonth(parseInt(e.target.value))} value={month}/>  \r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <TextField id=\"day\" label=\"日\" variant=\"filled\" \r\n                    helperText={dateMessage} type=\"number\" inputProps={{min:\"1\", max:\"31\"}} \r\n                    className={classes.fullWidth} onChange={(e)=>setDate(parseInt(e.target.value))} value={date}/>\r\n                </Grid>\r\n                <Hidden only={[\"xs\",\"md\",\"lg\",\"xl\"]}><Grid item sm={6} className={classes.grid} /></Hidden>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={()=>reset()}\r\n                    className={classes.button}>放弃更改</Button>\r\n                </Grid>\r\n                <Hidden only={[\"xs\",\"sm\"]}><Grid item  md={4} className={classes.grid} /></Hidden>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <Button variant=\"contained\" color=\"primary\" className={classes.button}>保存</Button>\r\n                </Grid>        \r\n            </Grid>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default EmptyStudentInfo","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Table\\StudentTable.tsx",["173","174"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { Card, Divider, Grid } from '@material-ui/core';\r\nimport StudentInfo from '../Form/StudentInfo';\r\nimport CourseInfo from './CourseInfo';\r\nimport { IStudent } from './../../redux/types';\r\n\r\n\r\nconst useRowStyles = makeStyles({\r\n  root: {\r\n    '& > *': {\r\n      borderBottom: 'unset',\r\n    },\r\n  },\r\n});\r\n\r\n\r\n\r\nfunction Row(props: {row: IStudent}) {\r\n  const { row } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useRowStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow className={classes.root} onClick={() => setOpen(!open)} selected={open} hover={true}>\r\n        <TableCell >\r\n          <IconButton aria-label=\"expand row\" size=\"small\" >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n        <TableCell align=\"right\">{row.gender ? \"男\":\"女\"}</TableCell>\r\n        <TableCell align=\"right\">{row.phone}</TableCell>\r\n        \r\n        <TableCell align=\"right\">{row.address}</TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box margin={1}>\r\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                课时信息\r\n              </Typography>\r\n              <CourseInfo data={row}/>\r\n              <Typography variant=\"h6\" gutterBottom component=\"div\" style={{marginTop: 16, marginBottom:8}}>\r\n                详细资料 - 学号：{row.id}\r\n              </Typography>\r\n              <Card>\r\n                <StudentInfo data={row} />\r\n              </Card>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default function StudentTable(props: {data: IStudent[], filterWord: string}) {\r\n  const { data, filterWord } = props\r\n \r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"collapsible table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell />\r\n            <TableCell>姓名</TableCell>\r\n            <TableCell align=\"right\">性别</TableCell>\r\n            <TableCell align=\"right\">电话</TableCell>\r\n            <TableCell align=\"right\">住址</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.filter((student: IStudent): boolean => student.name.includes(filterWord)).map((row: IStudent) => (\r\n            <Row key={row.id} row={row} />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      \r\n    </TableContainer>\r\n  );\r\n}\r\n","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Dialog\\CreateEvent.tsx",["175","176"],"import React, { useEffect, useState } from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl  from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toggleCreateEventDialog, addNewEvent, addNotification } from '../../redux/actions';\r\nimport { Typography, TextField, Container, FilledInput, Button, RadioGroup, Radio, Collapse } from '@material-ui/core';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { IState, NotificationVariant } from './../../redux/types';\r\nimport { useSnackbar } from 'notistack';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\t\troot: {\r\n\t\t\t\tflexGrow: 1,\r\n\t\t},\r\n\t\tinputBox: {\r\n\t\t\t\twidth: \"100px\",\r\n                marginLeft: theme.spacing(1),\r\n                marginRight: theme.spacing(1),\r\n\t\t\t\t'& input': {\r\n\t\t\t\t\t\ttextAlign:\"right\",\r\n\t\t\t\t}\r\n\t\t},\r\n\t\tdatePicker: {\r\n\t\t\twidth: \"150px\",\r\n\t\t\tmargin: theme.spacing(1),\r\n\t\t\t\t'& input': {\r\n\t\t\t\t\t\ttextAlign:\"right\",\r\n\t\t\t\t}\r\n\t\t},\r\n\t\tcontainer: {\r\n\t\t\twidth: \"100%\",\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tflexWrap: 'wrap',\r\n\t\t\tjustifyContent:\"space-around\",\r\n\t\t\talignItems:\"center\",\r\n\t\t\t[theme.breakpoints.down('xs')] :{\r\n\t\t\t\twidth: \"300px\",\r\n\t\t\t}\r\n\t\t},\r\n\t\tstudentsSelection: {\r\n\t\t\tmargin: theme.spacing(1),\r\n \r\n\t\t\twidth:350,\r\n\t\t\t[theme.breakpoints.down('xs')] :{\r\n\t\t\t\twidth: \"200px\",\r\n\t\t\t}\r\n\t\t},\r\n\t\tchips: {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tflexWrap: 'wrap',\r\n\t\t},\r\n\t\ttextField: {\r\n\t\t\tmarginLeft: theme.spacing(1),\r\n\t\t\tmarginRight: theme.spacing(1),\r\n\t\t\twidth: 200,\r\n\t\t},\r\n\t\tflexRow: {\r\n\t\t\tdisplay:\"flex\",\r\n\t\t\tjustifyContent: \"flex-start\",\r\n\t\t\tflexDirection:\"row\",\r\n\t\t\talignItems: \"center,\"\r\n\t\t},\r\n\t\taddSingleStudent: {\r\n\t\t\tdisplay:\"flex\",\r\n\t\t\tjustifyContent: \"center\",\r\n\t\t\tflexDirection:\"row\",\r\n\t\t\talignItems: \"flex-end\"\r\n\t\t},\r\n\t\ttitle: {\r\n\t\t\t'& h2': {\r\n\t\t\t\tdisplay:\"flex\",\r\n\t\t\t\talignItems:\"center\",\r\n\t\t\t}\r\n\t\t},\r\n\t\tpaper: {\r\n\t\t\tpadding: theme.spacing(2),\r\n\t\t\tmarginBottom: theme.spacing(1),\r\n\t\t\tbackground: grey[100],\r\n\t\t}\r\n\t\t\r\n}))\r\n\r\ntype message = {\r\n\tyear?: string,\r\n\tmonth?: string,\r\n\tdate?: string,\r\n\tstart?: string,\r\n\tend?: string,\r\n\troutineWeeks?: string,\r\n}\r\n\r\nexport default function CreateEvent() {\r\n\tconst theme = useTheme();\r\n\tconst fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\tconst classes = useStyles()\r\n\r\n\tconst open = useSelector((state: IState) => state.showCreateEventDialog)\r\n\tconst selectedDate = useSelector((state: IState) => state.selectedDate)\r\n\tconst eId = useSelector((state: IState) => state.currentEId)\r\n\tconst names = useSelector((state: IState) => state.studentNameList)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst ITEM_HEIGHT = 48;\r\n\tconst ITEM_PADDING_TOP = 8;\r\n\tconst MenuProps = {\r\n\t\tPaperProps: {\r\n\t\t\tstyle: {\r\n\t\t\t\tmaxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n\t\t\t\twidth: 250,\r\n\t\t\t},\r\n\t\t},\r\n    };\r\n    \r\n    const { enqueueSnackbar } = useSnackbar()\r\n\r\n\r\n\tconst [year, setYear] = useState<number>(-1)\r\n\tconst [month, setMonth] = useState<number>(-1)\r\n\tconst [date, setDate] = useState<number>(-1)\r\n\tconst [start, setStart] = useState(\"07:30\")\r\n\tconst [end, setEnd] = useState(\"09:30\")\r\n\tconst [type, setType] = useState(\"piano\")\r\n\tconst [newNames, setNewNames] = useState<string[]>([])\r\n\tconst [students, setStudents] = useState<string[]>([])\r\n\tconst [newStudent, setNewStudent] = useState(\"\")\r\n\tconst [routine, setRoutine] = useState(false)\r\n\tconst [routineWeeks, setRoutineWeeks] = useState(10)\r\n    const [errorMessage, setErrorMessage] = useState<message>({})\r\n    \r\n    const sendNotification = (text:string, variant?: NotificationVariant):void => {\r\n        enqueueSnackbar(text, {variant: variant})\r\n        dispatch(addNotification(text, \"schedule\", variant))\r\n    }\r\n\r\n\tconst reset = () => {\r\n\t\tsetYear(-1)\r\n\t\tsetMonth(-1)\r\n\t\tsetDate(-1)\r\n\t\tsetStart(\"07:30\")\r\n\t\tsetEnd(\"09:30\")\r\n\t\tsetType(\"piano\")\r\n\t\tsetStudents([])\r\n\t\tsetRoutine(false)\r\n\t\tsetRoutineWeeks(10)\r\n\t}\r\n\tconst verify = () => {\r\n\t\tlet hasError = false\r\n\t\tlet newMessage: message = {\r\n\t\t\tyear: \"\",\r\n\t\t\tmonth: \"\",\r\n\t\t\tdate: \"\",\r\n\t\t\tstart: \"\",\r\n\t\t\tend: \"\",\r\n\t\t\troutineWeeks: \"\",\r\n\t\t}\r\n\t\tif (year === undefined) {\r\n\t\t\tnewMessage.year = \"年份不能为空\"\r\n\t\t\thasError = true\r\n\t\t} else if (year < 1990) {\r\n\t\t\tnewMessage.year = \"年份格式为xxxx\"\r\n\t\t\thasError = true\r\n\t\t}\r\n\t\tif (month === undefined) {\r\n\t\t\tnewMessage.month = \"月份不能为空\"\r\n\t\t\thasError = true\r\n\t\t} else if (month < 1 || month > 12) {\r\n\t\t\tnewMessage.month = \"月份错误\"\r\n\t\t\thasError = true\r\n\t\t}\r\n\t\tif (date === undefined) {\r\n\t\t\tnewMessage.month = \"日期不能为空\"\r\n\t\t\thasError = true\r\n\t\t} else if (date < 1 || date > 31) {\r\n\t\t\tnewMessage.month = \"日期错误\"\r\n\r\n\t\t}\r\n\t\tif (year && month && date && new Date(year+\"/\"+month+\"/\"+date+\" \"+start) > new Date(year+\"/\"+month+\"/\"+date+\" \"+end)) {\r\n\t\t\tnewMessage.start = \"开始时间大于结束时间\"\r\n\t\t\tnewMessage.end = \"结束时间小于开始时间\"\r\n\t\t\thasError = true\r\n\t\t}  \r\n\t\tif (routineWeeks < 1) {\r\n\t\t\tnewMessage.routineWeeks = \"课程至少持续1周\"\r\n\t\t\thasError = true\r\n\t\t}\r\n\t\tif (hasError) {\r\n\t\t\tsetErrorMessage(newMessage)\r\n\t\t\treturn false\r\n\t\t} else {\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (selectedDate) {\r\n\t\t\t\tsetYear(selectedDate.getFullYear())\r\n\t\t\t\tsetMonth(selectedDate.getMonth() + 1)\r\n\t\t\t\tsetDate(selectedDate.getDate())\r\n\t\t}   \r\n\t}, [selectedDate])\r\n\r\n\treturn (\r\n\t\t\t<Dialog\r\n\t\t\t\tfullScreen={fullScreen}\r\n\t\t\t\topen={open}\r\n\t\t\t\tonClose={() => {\r\n\t\t\t\t\tsetErrorMessage({})\r\n\t\t\t\t\tdispatch(toggleCreateEventDialog())}}\r\n\t\t\t\taria-labelledby=\"responsive-dialog-title\"\r\n\t\t\t>\r\n\t\t\t\t<DialogTitle id=\"responsive-dialog-title\" className={classes.title}><PlaylistAddIcon />创建新课程</DialogTitle>\r\n\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">日期</Typography> \r\n\t\t\t\t\t\t<Container className={classes.container}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tlabel=\"年份\"\r\n\t\t\t\t\t\t\t\tid=\"year\"\r\n\t\t\t\t\t\t\t\tclassName={classes.inputBox}\r\n\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\tvalue={year}\r\n\t\t\t\t\t\t\t\tonChange={(e)=>setYear(parseInt(e.target.value))}\r\n\t\t\t\t\t\t\t\terror={errorMessage.year ? true : false}\r\n\t\t\t\t\t\t\t\thelperText={errorMessage.year ? errorMessage.year : \"\"}\r\n\t\t\t\t\t\t\t\tInputProps={{\r\n\t\t\t\t\t\t\t\t\tinputProps: {min: 1900},\r\n\t\t\t\t\t\t\t\t\tendAdornment: <InputAdornment position=\"end\">年</InputAdornment>,\r\n\t\t\t\t\t\t\t\t\tstyle: {textAlign:\"right\"}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tlabel=\"月份\"\r\n\t\t\t\t\t\t\t\tid=\"month\"\r\n\t\t\t\t\t\t\t\tclassName={classes.inputBox}\r\n\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\tvalue={month}\r\n\t\t\t\t\t\t\t\tonChange={(e)=>setMonth(parseInt(e.target.value))}\r\n\t\t\t\t\t\t\t\terror={errorMessage.month ? true : false}\r\n\t\t\t\t\t\t\t\thelperText={errorMessage.month ? errorMessage.month : \"\"}\r\n\t\t\t\t\t\t\t\tInputProps={{\r\n\t\t\t\t\t\t\t\t\tinputProps: {min: 1, max:12},\r\n\t\t\t\t\t\t\t\t\tendAdornment: <InputAdornment position=\"end\">月</InputAdornment>,\r\n\t\t\t\t\t\t\t\t\tstyle: {textAlign:\"right\"}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tlabel=\"日期\"\r\n\t\t\t\t\t\t\t\tid=\"date\"\r\n\t\t\t\t\t\t\t\tclassName={classes.inputBox}\r\n\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\tvalue={date}\r\n\t\t\t\t\t\t\t\tonChange={(e)=>setDate(parseInt(e.target.value))}\r\n\t\t\t\t\t\t\t\taria-describedby=\"date\"\r\n\t\t\t\t\t\t\t\terror={errorMessage.date ? true : false}\r\n\t\t\t\t\t\t\t\thelperText={errorMessage.date ? errorMessage.date : \"\"}\r\n\t\t\t\t\t\t\t\tInputProps={{\r\n\t\t\t\t\t\t\t\t\tinputProps: {min: 1, max:31},\r\n\t\t\t\t\t\t\t\t\tendAdornment: <InputAdornment position=\"end\">日</InputAdornment>,\r\n\t\t\t\t\t\t\t\t\tstyle: {textAlign:\"right\"}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Container>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">时间</Typography> \r\n\t\t\t\t\t\t<Container className={classes.container}>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<form  noValidate>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tid=\"start\"\r\n\t\t\t\t\t\t\t\tlabel=\"课程开始时间\"\r\n\t\t\t\t\t\t\t\ttype=\"time\"\r\n\t\t\t\t\t\t\t\tvalue={start}\r\n\t\t\t\t\t\t\t\tonChange={(e)=>setStart(e.target.value)}\r\n\t\t\t\t\t\t\t\tclassName={classes.datePicker}\r\n\t\t\t\t\t\t\t\terror={errorMessage.start ? true : false}\r\n\t\t\t\t\t\t\t\thelperText={errorMessage.start ? errorMessage.start : \"\"}\r\n\t\t\t\t\t\t\t\tInputLabelProps={{\r\n\t\t\t\t\t\t\t\t\tshrink: true,\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\tstep: 300, // 5 min\r\n\t\t\t\t\t\t\t\t}}\r\n\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tid=\"end\"\r\n\t\t\t\t\t\t\t\tlabel=\"课程结束时间\"\r\n\t\t\t\t\t\t\t\ttype=\"time\"\r\n\t\t\t\t\t\t\t\tvalue={end}\r\n\t\t\t\t\t\t\t\tonChange={(e)=>setEnd(e.target.value)}\r\n\t\t\t\t\t\t\t\tclassName={classes.datePicker}\r\n\t\t\t\t\t\t\t\terror={errorMessage.end ? true : false}\r\n\t\t\t\t\t\t\t\thelperText={errorMessage.end ? errorMessage.end : \"\"}\r\n\t\t\t\t\t\t\t\tInputLabelProps={{\r\n\t\t\t\t\t\t\t\t\tshrink: true,\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\tstep: 300, // 5 min\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</Container>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">课程类别</Typography>\r\n\t\t\t\t\t\t<Container className={classes.container}>\r\n\t\t\t\t\t\t\t<FormControl component=\"fieldset\">\r\n\t\t\t\t\t\t\t\t<RadioGroup row aria-label=\"type\" name=\"type\" value={type} onChange={(e)=>setType(e.target.value)}>\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel value=\"piano\" control={<Radio />} label=\"钢琴\" className={classes.inputBox}/>\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel value=\"artifact\" control={<Radio />} label=\"手工\" className={classes.inputBox}/>\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel value=\"other\" control={<Radio />} label=\"其他\" className={classes.inputBox}/>\r\n\t\t\t\t\t\t\t\t</RadioGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</Container>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">学生</Typography>\r\n\t\t\t\t\t\t<Container className={classes.container}>   \r\n\t\t\t\t\t\t\t<FormControl className={classes.studentsSelection}>\r\n\t\t\t\t\t\t\t\t<InputLabel id=\"students-label\">添加学生</InputLabel>\r\n\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\tlabelId=\"students-label\"\r\n\t\t\t\t\t\t\t\t\tid=\"students-box\"\r\n\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\tdisplayEmpty={true}\r\n\t\t\t\t\t\t\t\t\tvalue={students}\r\n\t\t\t\t\t\t\t\t\tonChange={e => {if (Array.isArray(e.target.value)) setStudents(e.target.value)}}\r\n\t\t\t\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\r\n\t\t\t\t\t\t\t\t\trenderValue={(selected) => {\r\n\t\t\t\t\t\t\t\t\t\tif (Array.isArray(selected)) {\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={classes.chips}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{selected.map((value) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip variant=\"outlined\" key={value} label={value} className={classes.chips}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//avatar={<Avatar src=\"https://picsum.photos/30\" />}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\treturn null\r\n\t\t\t\t\t\t\t\t\t\t}}}\r\n\t\t\t\t\t\t\t\t\tMenuProps={MenuProps}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{newNames ? newNames.map((name) => (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={name}>\r\n\t\t\t\t\t\t\t\t\t\t\t{name}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t)) : null}\r\n\t\t\t\t\t\t\t\t\t{names.map((name) => (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={name} value={name}>\r\n\t\t\t\t\t\t\t\t\t\t\t{name}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t</FormControl>   \r\n\t\t\t\t\t\t\t<Container className={classes.addSingleStudent}>\r\n                                <Typography>未找到学生？</Typography>\r\n\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\tlabel=\"手动输入姓名\"\r\n\t\t\t\t\t\t\t\t\tid=\"name\"\r\n\t\t\t\t\t\t\t\t\tclassName={classes.inputBox}\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tvalue={newStudent}\r\n\t\t\t\t\t\t\t\t\tonChange={(e)=>setNewStudent(e.target.value)}\r\n\t\t\t\t\t\t\t\t\taria-describedby=\"date\"\r\n\t\t\t\t\t\t\t\t\tInputProps={{\r\n\t\t\t\t\t\t\t\t\t\tstyle: {textAlign:\"right\"}\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n                                <Button \r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                onClick={()=> {\r\n\t\t\t\t\t\t\t\t\tif (newStudent !== \"\") {\r\n\t\t\t\t\t\t\t\t\t\tlet oldNewNames = newNames\r\n\t\t\t\t\t\t\t\t\t\toldNewNames.push(newStudent)\r\n\t\t\t\t\t\t\t\t\t\tsetNewNames(oldNewNames)\r\n\t\t\t\t\t\t\t\t\t\tsetNewStudent(\"\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}}>临时添加入名单</Button>\r\n\t\t\t\t\t\t\t</Container> \r\n\t\t\t\t\t\t</Container>         \r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\tvalue=\"end\"\r\n\t\t\t\t\t\tcontrol={<Switch color=\"primary\" checked={routine} onChange={()=>setRoutine(! routine)}/>}\r\n\t\t\t\t\t\tlabel=\"设为常驻课程\"\r\n\t\t\t\t\t\tlabelPlacement=\"end\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Collapse in={routine}>\r\n\t\t\t\t\t\t\t<Fade in={routine}>\r\n\t\t\t\t\t\t\t\t<Container className={classes.container}>\r\n\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\tlabel=\"课程将持续\"\r\n\t\t\t\t\t\t\t\t\tid=\"standard-start-adornment\"\r\n\t\t\t\t\t\t\t\t\tclassName={classes.datePicker}\r\n\t\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\t\tvalue={routineWeeks}\r\n\t\t\t\t\t\t\t\t\tonChange={(e)=>setRoutineWeeks(parseInt(e.target.value))}\r\n\t\t\t\t\t\t\t\t\terror={errorMessage.routineWeeks ? true : false}\r\n\t\t\t\t\t\t\t\t\thelperText={errorMessage.routineWeeks ? errorMessage.routineWeeks : \"\"}\r\n\t\t\t\t\t\t\t\t\tInputProps={{\r\n\t\t\t\t\t\t\t\t\t\tinputProps: {min: 1},\r\n\t\t\t\t\t\t\t\t\t\tendAdornment: <InputAdornment position=\"end\">周</InputAdornment>,\r\n\t\t\t\t\t\t\t\t\t\tstyle: {textAlign:\"right\"}\r\n\t\t\t\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t\t\t</Container>\r\n\t\t\t\t\t\t\t</Fade>\r\n\t\t\t\t\t\t</Collapse>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</DialogContent>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" \r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\treset()\r\n\t\t\t\t\t\tdispatch(toggleCreateEventDialog())\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\t取消并清空\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={() => {\r\n\t\t\t\t\t\tsetErrorMessage({})\r\n\t\t\t\t\t\tif(verify() && year && month && date) {\r\n\t\t\t\t\t\t\tdispatch(addNewEvent({\r\n\t\t\t\t\t\t\t\tid: eId,\r\n\t\t\t\t\t\t\t\tyear: year,\r\n\t\t\t\t\t\t\t\tmonth: month,\r\n\t\t\t\t\t\t\t\tdate:date,\r\n\t\t\t\t\t\t\t\tstart: start,\r\n\t\t\t\t\t\t\t\tend: end,\r\n\t\t\t\t\t\t\t\tstudents: students,\r\n\t\t\t\t\t\t\t\troutine: routine,\r\n\t\t\t\t\t\t\t\troutineWeeks: routineWeeks,\r\n\t\t\t\t\t\t\t\ttype: type\r\n                            }))\r\n                            let typeC = \"\"\r\n                            if (type === \"piano\") {\r\n                                typeC = \"钢琴\"\r\n                            } else if (type == \"artifact\") {\r\n                                typeC = \"手工\"\r\n                            }\r\n                            sendNotification(`学生${students.join('，')}于${year}年${month}月${date}日 ${start}至${end}的${typeC}课已创建成功`, \"success\")\r\n\t\t\t\t\t\t\treset()\r\n\t\t\t\t\t\t\tdispatch(toggleCreateEventDialog())\r\n\t\t\t\t\t\t}}} autoFocus>\r\n\t\t\t\t\t\t确认添加\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\t);\r\n}\r\n","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Dialog\\EditEvent.tsx",["177","178","179","180","181","182","183","184","185"],"import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport FormHelperText  from '@material-ui/core/FormHelperText';\r\nimport FormControl  from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Divider, Grid, Typography, TextField, Container, FilledInput, Button, RadioGroup, Radio, Collapse } from '@material-ui/core';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { IState, IEvent } from './../../redux/types';\r\n\r\n\r\nimport { toggleEditEventDialog, saveEdittedEvent, clearSelectedEvent, updateCalendarAfterEdit, updateCalendarAfterDelete } from '../../redux/actions';\r\nimport { deleteEventById } from './../../redux/actions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    inputBox: {\r\n        width: \"100px\",\r\n        margin: theme.spacing(1),\r\n        '& input': {\r\n            textAlign:\"right\",\r\n        }\r\n    },\r\n    datePicker: {\r\n      width: \"150px\",\r\n      margin: theme.spacing(1),\r\n        '& input': {\r\n            textAlign:\"right\",\r\n        }\r\n    },\r\n    container: {\r\n      width: \"100%\",\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent:\"space-around\",\r\n      alignItems:\"center\",\r\n      [theme.breakpoints.down('xs')] :{\r\n        width: \"300px\",\r\n      }\r\n    },\r\n    studentsSelection: {\r\n      margin: theme.spacing(1),\r\n \r\n      width:350,\r\n      [theme.breakpoints.down('xs')] :{\r\n        width: \"200px\",\r\n      }\r\n    },\r\n    chips: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n    },\r\n    flexRow: {\r\n      display:\"flex\",\r\n      justifyContent: \"flex-start\",\r\n      flexDirection:\"row\",\r\n      alignItems: \"center,\"\r\n    },\r\n    addSingleStudent: {\r\n      display:\"flex\",\r\n      justifyContent: \"center\",\r\n      flexDirection:\"row\",\r\n      alignItems: \"flex-end\"\r\n    },\r\n    title: {\r\n      '& h2': {\r\n        display:\"flex\",\r\n        alignItems:\"center\",\r\n      }\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      marginBottom: theme.spacing(1),\r\n      background: grey[100],\r\n    }\r\n    \r\n}))\r\n\r\ntype message = {\r\n  year?: string,\r\n  month?: string,\r\n  date?: string,\r\n  start?: string,\r\n  end?: string,\r\n  routineWeeks?: string,\r\n}\r\n\r\nexport default function EditEvent() {\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const classes = useStyles()\r\n\r\n  const open = useSelector((state: IState) => state.showEditEventDialog)\r\n  const names = useSelector((state: IState) => state.studentNameList)\r\n  const event: IEvent = useSelector((state: IState) : IEvent => {\r\n    if (state.selectedEId !== null && state.allEvents[state.selectedEId]) {\r\n      return state.allEvents[state.selectedEId]\r\n    } else {\r\n      return {\r\n          id: -1,\r\n          year: -1,\r\n          month: -1,\r\n          date: -1,\r\n          start: \"\",\r\n          end: \"\",\r\n          type: \"piano\",\r\n          students: [],\r\n          routine: false,\r\n      }\r\n  }\r\n  })\r\n  const dispatch = useDispatch()\r\n\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n\r\n  \r\n\r\n  const [year, setYear] = useState(event.year)\r\n  const [month, setMonth] = useState(event.month)\r\n  const [date, setDate] = useState(event.date)\r\n  const [start, setStart] = useState(event.start)\r\n  const [end, setEnd] = useState(event.end)\r\n  const [type, setType] = useState(event.type)\r\n  const [newNames, setNewNames] = useState<string[]>([])\r\n  const [students, setStudents] = useState<string[]>(event.students)\r\n  const [newStudent, setNewStudent] = useState(\"\")\r\n  const [routine, setRoutine] = useState(event.routine)\r\n  const [routineWeeks, setRoutineWeeks] = useState(event.routineWeeks)\r\n  const [errorMessage, setErrorMessage] = useState<message>({})\r\n\r\n  const reset = () => {\r\n    setYear(event.year)\r\n    setMonth(event.month)\r\n    setDate(event.date)\r\n    setStart(event.start)\r\n    setEnd(event.end)\r\n    setType(event.type)\r\n    setStudents(event.students)\r\n    setRoutine(event.routine)\r\n    setRoutineWeeks(event.routineWeeks ? event.routineWeeks : 10)\r\n  }\r\n  const hasChanged = () => {\r\n    if (\r\n      year !== event.year ||\r\n      month !== event.month ||\r\n      date !== event.date ||\r\n      start !== event.start ||\r\n      end !== event.end ||\r\n      type !== event.type ||  \r\n      students.length !== event.students.length ||\r\n      routine !== event.routine\r\n    ) return true\r\n\r\n    if (routine === event.routine && routine === true && routineWeeks !== event.routineWeeks) return true\r\n\r\n    if (students.length === event.students.length) {\r\n      students.forEach(student => {\r\n        if (! event.students.includes(student)) {\r\n          return true\r\n        }\r\n      })\r\n    }\r\n  \r\n    return false  \r\n  }\r\n  const verify = () => {\r\n    let hasError = false\r\n    let newMessage: message = {\r\n      year: \"\",\r\n      month: \"\",\r\n      date: \"\",\r\n      start: \"\",\r\n      end: \"\",\r\n      routineWeeks: \"\",\r\n    }\r\n    if (year === undefined) {\r\n      newMessage.year = \"年份不能为空\"\r\n      hasError = true\r\n    } else if (year < 1990) {\r\n      newMessage.year = \"年份格式为xxxx\"\r\n      hasError = true\r\n    }\r\n    if (month === undefined) {\r\n      newMessage.month = \"月份不能为空\"\r\n      hasError = true\r\n    } else if (month < 1 || month > 12) {\r\n      newMessage.month = \"月份错误\"\r\n      hasError = true\r\n    }\r\n    if (date === undefined) {\r\n      newMessage.month = \"日期不能为空\"\r\n      hasError = true\r\n    } else if (date < 1 || date > 31) {\r\n      newMessage.month = \"日期错误\"\r\n\r\n    }\r\n    if (year && month && date && new Date(year+\"/\"+month+\"/\"+date+\" \"+start) > new Date(year+\"/\"+month+\"/\"+date+\" \"+end)) {\r\n      newMessage.start = \"开始时间大于结束时间\"\r\n      newMessage.end = \"结束时间小于开始时间\"\r\n      hasError = true\r\n    }  \r\n    if (routine && routineWeeks && routineWeeks < 1) {\r\n      newMessage.routineWeeks = \"课程至少持续1周\"\r\n      hasError = true\r\n    }\r\n    if (hasError) {\r\n      setErrorMessage(newMessage)\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (open) reset()\r\n  }, [open])\r\n\r\n\r\n  return (\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={() => {\r\n          setErrorMessage({})\r\n          dispatch(toggleEditEventDialog())}}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"responsive-dialog-title\" className={classes.title}><PlaylistAddIcon />创建新课程</DialogTitle>\r\n        <DialogContent>\r\n          \r\n          <Paper className={classes.paper}>\r\n            <Typography variant=\"h6\">日期</Typography> \r\n            <Container className={classes.container}>\r\n              <TextField\r\n                required\r\n                label=\"年份\"\r\n                id=\"year\"\r\n                className={classes.inputBox}\r\n                type=\"number\"\r\n                value={year}\r\n                onChange={(e)=>setYear(parseInt(e.target.value))}\r\n                error={errorMessage.year ? true : false}\r\n                helperText={errorMessage.year ? errorMessage.year : \"\"}\r\n                InputProps={{\r\n                  inputProps: {min: 1900},\r\n                  endAdornment: <InputAdornment position=\"end\">年</InputAdornment>,\r\n                  style: {textAlign:\"right\"}\r\n                }}\r\n              />\r\n              <TextField\r\n                required\r\n                label=\"月份\"\r\n                id=\"month\"\r\n                className={classes.inputBox}\r\n                type=\"number\"\r\n                value={month}\r\n                onChange={(e)=>setMonth(parseInt(e.target.value))}\r\n                error={errorMessage.month ? true : false}\r\n                helperText={errorMessage.month ? errorMessage.month : \"\"}\r\n                InputProps={{\r\n                  inputProps: {min: 1, max:12},\r\n                  endAdornment: <InputAdornment position=\"end\">月</InputAdornment>,\r\n                  style: {textAlign:\"right\"}\r\n                }}\r\n              />\r\n              <TextField\r\n                required\r\n                label=\"日期\"\r\n                id=\"date\"\r\n                className={classes.inputBox}\r\n                type=\"number\"\r\n                value={date}\r\n                onChange={(e)=>setDate(parseInt(e.target.value))}\r\n                aria-describedby=\"date\"\r\n                error={errorMessage.date ? true : false}\r\n                helperText={errorMessage.date ? errorMessage.date : \"\"}\r\n                InputProps={{\r\n                  inputProps: {min: 1, max:31},\r\n                  endAdornment: <InputAdornment position=\"end\">日</InputAdornment>,\r\n                  style: {textAlign:\"right\"}\r\n                }}\r\n              />\r\n            </Container>\r\n          </Paper>\r\n          \r\n          <Paper className={classes.paper}>\r\n            <Typography variant=\"h6\">时间</Typography> \r\n            <Container className={classes.container}>\r\n            \r\n            <form  noValidate>\r\n              <TextField\r\n                required\r\n                id=\"start\"\r\n                label=\"课程开始时间\"\r\n                type=\"time\"\r\n                value={start}\r\n                onChange={(e)=>setStart(e.target.value)}\r\n                className={classes.datePicker}\r\n                error={errorMessage.start ? true : false}\r\n                helperText={errorMessage.start ? errorMessage.start : \"\"}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                inputProps={{\r\n                  step: 300, // 5 min\r\n                }}\r\n\r\n              />\r\n              <TextField\r\n                required\r\n                id=\"end\"\r\n                label=\"课程结束时间\"\r\n                type=\"time\"\r\n                value={end}\r\n                onChange={(e)=>setEnd(e.target.value)}\r\n                className={classes.datePicker}\r\n                error={errorMessage.end ? true : false}\r\n                helperText={errorMessage.end ? errorMessage.end : \"\"}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                inputProps={{\r\n                  step: 300, // 5 min\r\n                }}\r\n              />\r\n            </form>\r\n            </Container>\r\n          </Paper>\r\n          <Paper className={classes.paper}>\r\n            <Typography variant=\"h6\">课程类别</Typography>\r\n            <Container className={classes.container}>\r\n              <FormControl component=\"fieldset\">\r\n                <RadioGroup row aria-label=\"type\" name=\"type\" value={type} onChange={(e)=>setType(e.target.value)}>\r\n                  <FormControlLabel value=\"piano\" control={<Radio />} label=\"钢琴\" className={classes.inputBox}/>\r\n                  <FormControlLabel value=\"artifact\" control={<Radio />} label=\"手工\" className={classes.inputBox}/>\r\n                  <FormControlLabel value=\"other\" control={<Radio />} label=\"其他\" className={classes.inputBox}/>\r\n                </RadioGroup>\r\n              </FormControl>\r\n            </Container>\r\n            \r\n          </Paper>\r\n          <Paper className={classes.paper}>\r\n            \r\n            <Typography variant=\"h6\">学生</Typography>\r\n            <Container className={classes.container}>     \r\n                <FormControl className={classes.studentsSelection}>\r\n                  <InputLabel id=\"students-label\">添加学生</InputLabel>\r\n                  <Select\r\n                    labelId=\"students-label\"\r\n                    id=\"students-box\"\r\n                    multiple\r\n                    displayEmpty={true}\r\n                    value={students}\r\n                    onChange={e => {if (Array.isArray(e.target.value)) setStudents(e.target.value)}}\r\n                    input={<Input id=\"select-multiple-chip\" />}\r\n                    renderValue={(selected) => {\r\n                      if (Array.isArray(selected)) {\r\n                        return (\r\n                          <div className={classes.chips}>\r\n                            {selected.map((value) => (\r\n                              <Chip variant=\"outlined\" key={value} label={value} className={classes.chips}\r\n                              //avatar={<Avatar src=\"https://picsum.photos/30\" />}\r\n                              />\r\n                            ))}\r\n                          </div>\r\n                        )\r\n                      } else {\r\n                        return null\r\n                      }}}\r\n                    MenuProps={MenuProps}\r\n                  >\r\n                    {newNames ? newNames.map((name) => (\r\n                      <MenuItem key={name} value={name}>\r\n                        {name}\r\n                      </MenuItem>\r\n                    )) : null}\r\n                    {names.map((name) => (\r\n                      <MenuItem key={name} value={name}>\r\n                        {name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>   \r\n                <Container className={classes.addSingleStudent}>\r\n                  <TextField\r\n                    label=\"请输入姓名\"\r\n                    id=\"name\"\r\n                    className={classes.inputBox}\r\n                    type=\"text\"\r\n                    value={newStudent}\r\n                    onChange={(e)=>setNewStudent(e.target.value)}\r\n                    aria-describedby=\"date\"\r\n                    InputProps={{\r\n                      style: {textAlign:\"right\"}\r\n                    }}\r\n                  />\r\n                  <Button onClick={()=> {\r\n                    if (newStudent !== \"\") {\r\n                      let oldNewNames= newNames\r\n                      oldNewNames.push(newStudent)\r\n                      setNewNames(oldNewNames)\r\n                      setNewStudent(\"\")\r\n                    }\r\n                  }}>添加学生 +</Button>\r\n                </Container> \r\n            </Container>         \r\n          </Paper>\r\n          <Paper className={classes.paper}>\r\n            <FormControlLabel\r\n            value=\"end\"\r\n            control={<Switch color=\"primary\" checked={routine} onChange={()=>setRoutine(! routine)}/>}\r\n            label=\"设为常驻课程\"\r\n            labelPlacement=\"end\"\r\n            />\r\n            <Collapse in={routine}>\r\n              <Fade in={routine}>\r\n                <Container className={classes.container}>\r\n                  <TextField\r\n                    label=\"课程将持续\"\r\n                    id=\"standard-start-adornment\"\r\n                    className={classes.datePicker}\r\n                    type=\"number\"\r\n                    value={routineWeeks}\r\n                    onChange={(e)=>setRoutineWeeks(parseInt(e.target.value))}\r\n                    error={errorMessage.routineWeeks ? true : false}\r\n                    helperText={errorMessage.routineWeeks ? errorMessage.routineWeeks : \"\"}\r\n                    InputProps={{\r\n                      inputProps: {min: 1},\r\n                      endAdornment: <InputAdornment position=\"end\">周</InputAdornment>,\r\n                      style: {textAlign:\"right\"}\r\n                    }}\r\n                  />\r\n                </Container>\r\n              </Fade>\r\n            </Collapse>\r\n            \r\n          </Paper>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button variant=\"contained\" color=\"secondary\" \r\n            onClick={() => {\r\n              dispatch(deleteEventById(event.id))\r\n              dispatch(updateCalendarAfterDelete(event.id)) //need to put before clear selected Event\r\n              dispatch(toggleEditEventDialog())\r\n            }}>\r\n              删除此课程\r\n          </Button>\r\n          <Button variant=\"outlined\" color=\"secondary\" \r\n          onClick={() => {\r\n            reset()\r\n          }}>\r\n            放弃修改\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={() => {\r\n            setErrorMessage({})\r\n            if(verify()) {\r\n              dispatch(saveEdittedEvent({\r\n                id: event.id,\r\n                year: year,\r\n                month: month,\r\n                date:date,\r\n                start: start,\r\n                end: end,\r\n                students: students,\r\n                routine: routine,\r\n                routineWeeks: routineWeeks,\r\n                type: type\r\n              }))\r\n              dispatch(updateCalendarAfterEdit(event.id)) //need to put before clear selected Event\r\n              dispatch(toggleEditEventDialog())\r\n            }}} autoFocus>\r\n            {hasChanged() ? \"保存并返回\" : \"确认并返回\"}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Form\\StudentInfo.tsx",["186","187","188","189","190","191","192","193"],"import { Button, Card, Grid, Hidden, TextField } from '@material-ui/core';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport { IStudent } from './../../redux/types';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: grey[100],\r\n    },\r\n    grid: {\r\n        margin: \"16px 0\",\r\n        display:\"flex\",\r\n        justifyContent:\"center\",  \r\n    },\r\n\r\n    fullWidth: {\r\n        width: \"calc(100% - 64px)\",\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    button: {\r\n        width: \"200px\",\r\n    }\r\n  }));\r\n\r\n\r\n\r\nconst StudentInfo = (props: {data: IStudent}) => {\r\n    const { data }  = props\r\n    const classes = useStyles();\r\n    const [name, setName] = useState(data.name)\r\n    const [nameMessage, setNameMessage] = useState(name ? \"\" : \"请输入您的姓名\")\r\n    const [gender, setGender] = useState(data.gender !== undefined ? data.gender : -1);\r\n    const [genderMessage, setGenderMessage] = useState(data.gender !== undefined ? \"\" : \"请输入您的性别\")\r\n    const [phone, setPhone] = useState(data.phone)\r\n    const [phoneMessage, setPhoneMessage] = useState(phone ? \"\" : \"请输入您的手机号码\")\r\n    const [email, setEmail] = useState(data.email)\r\n    const [emailMessage, setEmailMessage] = useState(email ? \"\" : \"请输入您的电子邮箱\")\r\n    const [address, setAddress] = useState(data.address)\r\n    const [addressMessage, setAddressMessage] = useState(name ? \"\" : \"请输入您的地址\")\r\n    const [year, setYear] = useState(data.year)\r\n    const [yearMessage, setYearMessage] = useState(year ? \"\" : \"请输入您的出生年份(xxxx)\")\r\n    const [month, setMonth] = useState(data.month)\r\n    const [monthMessage, setMonthMessage] = useState(month ? \"\" : \"请输入您的出生月份\")\r\n    const [date, setDate] = useState(data.date)\r\n    const [dateMessage, setDateMessage] = useState(date ? \"\" : \"请输入您的出生日期\")\r\n\r\n    const reset = () => {\r\n        setName(data.name)\r\n        setGender(data.gender)\r\n        setPhone(data.phone)\r\n        setEmail(data.email)\r\n        setAddress(data.address)\r\n        setYear(data.year)\r\n        setMonth(data.month)\r\n        setDate(data.date)\r\n    }\r\n\r\n    return(\r\n        <Card className={classes.root}>\r\n            <Grid container>\r\n                <Grid item xs={12} sm={12} md={6} className={classes.grid}>\r\n                    <TextField id=\"name\" label=\"姓名\" variant=\"filled\" helperText={nameMessage}\r\n                    onChange={(e)=>setName(e.target.value)} value={name}\r\n                    className={classes.fullWidth}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={6} className={classes.grid}>\r\n                    <TextField\r\n                    id=\"gender\"\r\n                    select\r\n                    label=\"性别\"\r\n                    onChange={(e)=>setGender(parseInt(e.target.value))}\r\n                    value={gender}\r\n                    helperText={genderMessage}\r\n                    variant=\"filled\"\r\n                    className={classes.fullWidth}\r\n                    >\r\n                        <MenuItem key=\"1\" value=\"1\">男生</MenuItem>\r\n                        <MenuItem key=\"0\" value=\"0\">女生</MenuItem>\r\n                    </TextField>\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={6} className={classes.grid}>\r\n                    <TextField id=\"phone\" label=\"手机\" variant=\"filled\" helperText={phoneMessage}\r\n                    className={classes.fullWidth} onChange={(e)=>setPhone(e.target.value)} value={phone}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={6} className={classes.grid}>\r\n                    <TextField id=\"email\" label=\"邮箱\" variant=\"filled\" helperText={emailMessage}\r\n                    className={classes.fullWidth} onChange={(e)=>setEmail(e.target.value)} value={email}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={12} className={classes.grid}>\r\n                    <TextField id=\"address\" label=\"地址\" variant=\"filled\" helperText={addressMessage}\r\n                    className={classes.fullWidth} onChange={(e)=>setAddress(e.target.value)} value={address}/> \r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <TextField id=\"year\" label=\"年\" variant=\"filled\" \r\n                    helperText={yearMessage} type=\"number\" inputProps={{min:\"1900\", max:\"2025\"}} \r\n                    className={classes.fullWidth} onChange={(e)=>setYear(parseInt(e.target.value))} value={year}/> \r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <TextField id=\"month\" label=\"月\" variant=\"filled\" \r\n                    helperText={monthMessage} type=\"number\" inputProps={{min:\"1\", max:\"12\"}} \r\n                    className={classes.fullWidth} onChange={(e)=>setMonth(parseInt(e.target.value))} value={month}/>  \r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <TextField id=\"day\" label=\"日\" variant=\"filled\" \r\n                    helperText={dateMessage} type=\"number\" inputProps={{min:\"1\", max:\"31\"}} \r\n                    className={classes.fullWidth} onChange={(e)=>setDate(parseInt(e.target.value))} value={date}/>\r\n                </Grid>\r\n                <Hidden only={[\"xs\",\"md\",\"lg\",\"xl\"]}><Grid item sm={6} className={classes.grid} /></Hidden>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={()=>reset()}\r\n                    className={classes.button}>放弃更改</Button>\r\n                </Grid>\r\n                <Hidden only={[\"xs\",\"sm\"]}><Grid item  md={4} className={classes.grid} /></Hidden>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <Button variant=\"contained\" color=\"primary\" className={classes.button}>保存</Button>\r\n                </Grid>        \r\n            </Grid>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default StudentInfo","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Table\\CourseInfo.tsx",["194","195","196","197"],"import { Button, Card, Grid, Hidden, TextField } from '@material-ui/core';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: grey[100],\r\n        display: \"flex\",\r\n        flexDirection:\"column\",\r\n        justifyContent:\"flexCenter\",\r\n        alignItems:\"center\",\r\n    },\r\n    table:{\r\n        width: \"calc(100% - 64px)\",\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    grid: {\r\n        margin: theme.spacing(2, 0),\r\n        display:\"flex\",\r\n        justifyContent:\"center\",  \r\n    },\r\n    buttonBox: {\r\n        display:\"flex\",\r\n        alignItems:\"center\",\r\n        justifyContent:\"center\",\r\n\r\n    },\r\n    firstColumn: {\r\n        width:200,\r\n        [theme.breakpoints.down('sm')]:{\r\n            width:70,\r\n        },\r\n        [theme.breakpoints.up('lg')]:{\r\n            width:300,\r\n        }\r\n    },\r\n    changeButton: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    button: {\r\n        margin: \"auto\",\r\n        width: \"200px\",\r\n    }\r\n}))\r\ntype courseData = {\r\n    pHour: number,\r\n    aHour: number,\r\n    pHourPast: number,\r\n    aHourPast: number,\r\n}\r\nconst CourseInfo = (props: {data: courseData}) => {\r\n    const classes = useStyles()\r\n    const { data } = props\r\n\r\n    const [pHour, setP] = useState(data.pHour)\r\n    const [aHour, setA] = useState(data.aHour)\r\n\r\n    const [pChangeText, setPChangeText] = useState(\"\")\r\n    const [aChangeText, setAChangeText] = useState(\"\")\r\n\r\n    const [pToConfirm, setPToConfirm] = useState(false)\r\n    const [aToConfirm, setAToConfirm] = useState(false)\r\n\r\n    const [pChangeValue, setPChangeValue] = useState(0)\r\n    const [aChangeValue, setAChangeValue] = useState(0)\r\n\r\n    const [pErrorMessage, setPErrorMessage] = useState(\"\")\r\n    const [aErrorMessage, setAErrorMessage] = useState(\"\")\r\n\r\n    const reset = () => {\r\n        setP(data.pHour)\r\n        setA(data.aHour)\r\n        setPChangeText(\"\")\r\n        setAChangeText(\"\")\r\n        setPToConfirm(false)\r\n        setAToConfirm(false)\r\n        setPChangeValue(0)\r\n        setAChangeValue(0)\r\n        setPErrorMessage(\"\")\r\n        setAErrorMessage(\"\")\r\n    }\r\n    const displayText = (initValue: number, changeValue:number, toConfirm: boolean = false): JSX.Element => {\r\n        if (changeValue === 0) return <p>{String(initValue)}</p>\r\n        if (toConfirm) {\r\n            return (\r\n            <div>\r\n                <del style={{color: \"grey\", display:\"inline-block\", padding: \"0 8px\"}}>{initValue}</del>&raquo;\r\n                <strong style={{color: changeValue > 0 ? \"green\" : \"red\", display:\"inline-block\", padding: \"0 8px\"}}>{initValue + changeValue}</strong>\r\n            </div>)\r\n        } else {\r\n            if (changeValue > 0) {\r\n                return <p>{initValue + \" + \" + changeValue}</p>\r\n            } else {\r\n                return <p>{initValue + \" - \" + Math.abs(changeValue)}</p>\r\n            } \r\n        }\r\n        \r\n\r\n    }\r\n    return (\r\n        <Card className={classes.root}>\r\n            <TableContainer component={Paper} className={classes.table}>\r\n            <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                <TableRow>\r\n                    <TableCell align=\"center\" className={classes.firstColumn} component=\"th\">课程</TableCell>\r\n                    <TableCell align=\"center\">已上课时</TableCell>\r\n                    <TableCell align=\"center\">剩余课时</TableCell>\r\n                    <TableCell size=\"small\" align=\"center\">增减剩余课时</TableCell>   \r\n                </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    <TableRow key={\"钢琴\"}>\r\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\" className={classes.firstColumn}>钢琴</TableCell>\r\n                        <TableCell align=\"center\">{data.pHourPast}</TableCell>\r\n                        <TableCell align=\"center\">\r\n                            {displayText(pHour, pChangeValue, pToConfirm)}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TextField \r\n                                id=\"pChange\" \r\n                                label=\"钢琴课时增减\" \r\n                                variant=\"outlined\" \r\n                                value={pChangeText}\r\n                                error={pErrorMessage.length > 0}\r\n                                helperText={pErrorMessage}\r\n                                inputProps={{style: {textAlign: \"right\"}}}\r\n                                onChange={(e)=>{\r\n                                    setPErrorMessage(\"\")\r\n                                    setPToConfirm(false)\r\n                                    let value = e.target.value\r\n                                    setPChangeText(value)\r\n                                    if (value !== \"\") {\r\n                                        if (! isNaN(parseInt(value))) {\r\n                                            setPChangeValue(parseInt(value))\r\n                                        } else if (value.length === 1 && (value.startsWith(\"+\") || value.startsWith(\"-\"))) {\r\n                                            setPChangeValue(0)\r\n                                        } else {\r\n                                            setPChangeValue(0)\r\n                                            setPErrorMessage(\"格式错误，正确示例: 1, +1, -1\")\r\n                                        }\r\n                                    } else {\r\n                                        setPChangeValue(0)\r\n                                    }  \r\n                                }}\r\n                            />\r\n                            <Button \r\n                            variant=\"outlined\" color={pChangeValue >= 0 ? \"primary\" : \"secondary\"}\r\n                            className={classes.changeButton}\r\n                            onClick={() => setPToConfirm(true)}\r\n                            >\r\n                                确认{pChangeValue >= 0 ? \"增加\" : \"减少\"}\r\n                            </Button>\r\n                        </TableCell>  \r\n                    </TableRow>\r\n                    <TableRow key={\"手工\"}>\r\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\" className={classes.firstColumn}>手工</TableCell>\r\n                        <TableCell align=\"center\">{data.aHourPast}</TableCell>\r\n                        <TableCell align=\"center\">\r\n                            {displayText(aHour, aChangeValue, aToConfirm)}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <TextField \r\n                                    id=\"aChange\" \r\n                                    label=\"手工课时增减\" \r\n                                    variant=\"outlined\" \r\n                                    value={aChangeText}\r\n                                    error={aErrorMessage.length > 0}\r\n                                    helperText={aErrorMessage}\r\n                                    inputProps={{style: {textAlign: \"right\"}}}\r\n                                    onChange={(e)=>{\r\n                                        setAErrorMessage(\"\")\r\n                                        setAToConfirm(false)\r\n                                        let value = e.target.value\r\n                                        setAChangeText(value)\r\n                                        if (value !== \"\") {\r\n                                            if (! isNaN(parseInt(value))) {\r\n                                                setAChangeValue(parseInt(value))\r\n                                            } else if (value.length === 1 && (value.startsWith(\"+\") || value.startsWith(\"-\"))) {\r\n                                                setAChangeValue(0)\r\n                                            } else {\r\n                                                setAChangeValue(0)\r\n                                                setAErrorMessage(\"格式错误，正确示例: 1, +1, -1\")\r\n                                            }\r\n                                        } else {\r\n                                            setAChangeValue(0)\r\n                                        }  \r\n                                    }}\r\n                                />\r\n                                <Button \r\n                                variant=\"outlined\" color={aChangeValue >= 0 ? \"primary\" : \"secondary\"}\r\n                                className={classes.changeButton}\r\n                                onClick={() => setAToConfirm(true)}\r\n                                >\r\n                                    确认{aChangeValue >= 0 ? \"增加\" : \"减少\"}\r\n                                </Button>\r\n                            </TableCell>  \r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n            \r\n            </TableContainer>\r\n            <Grid container>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>reset()}\r\n                className={classes.button}>放弃更改</Button>\r\n                </Grid>\r\n                <Hidden only={[\"xs\",\"sm\"]}><Grid item  md={4} className={classes.grid} /></Hidden>\r\n                <Grid item xs={12} sm={6} md={4} className={classes.grid}>\r\n                    <Button variant=\"contained\" color=\"primary\" className={classes.button} disabled={!pToConfirm && !aToConfirm}>保存</Button>\r\n                </Grid>  \r\n            </Grid>\r\n        </Card>\r\n      );\r\n}\r\n\r\nexport default CourseInfo","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Table\\NotificationTable.tsx",["198"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { INotifications, IState, INotification } from './../../redux/types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport  Box  from '@material-ui/core/Box';\r\nimport { readNotification } from './../../redux/actions';\r\n\r\ninterface Column {\r\n  id: 'text' |  'timestamp';\r\n  label: string;\r\n  width?: string;\r\n  minWidth?: number;\r\n  align?: 'right'|'center'|'left';\r\n  format?: (value: number) => string;\r\n}\r\n\r\nconst columns: Column[] = [\r\n  { id: 'text', label: '消息内容', minWidth: 150, align:\"left\", width: \"100%\"},\r\n  {\r\n    id: 'timestamp',\r\n    label: '时间',\r\n    minWidth: 150,\r\n    align: 'center',\r\n    format: (timestamp:number) => {\r\n        let date = new Date(timestamp)\r\n        let timeString\r\n        if (Date.now() - date.getTime() < 60 * 1000) {\r\n            timeString = \"刚刚\"\r\n        } else if (Date.now() - date.getTime() < 60 * 60 * 1000) {\r\n            timeString = Math.round((Date.now() - date.getTime())/60000) + \"分钟前\"\r\n        } else if (Date.now() - date.getTime() < 24 * 60 * 60 * 1000) {\r\n            timeString = Math.round((Date.now() - date.getTime())/(60 * 60000)) + \"小时前\"\r\n        } else {\r\n            timeString = date.getFullYear()+\"年\"+(date.getMonth()+1)+\"月\"+date.getDate()+\"日 \"+date.getHours()+\":\"+(date.getMinutes()<10?'0':'')+date.getMinutes()\r\n        }\r\n        return timeString\r\n    },\r\n  },\r\n];\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    height: 600,\r\n    minHeight: 200,\r\n    maxHeight: 600,\r\n  },\r\n  isNew: {\r\n    background: theme.palette.grey[50],\r\n  }\r\n}));\r\n\r\nexport default function NotificationTable(props: {searchWord: string, category: keyof INotifications}) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch()\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const notifications = useSelector((state: IState) => state.notifications[props.category])\r\n  const setting = useSelector((state: IState) => state.setting)\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth, wordBreak: \"break-all\", width: column.width ? column.width : \"\" }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {notifications.filter((row: INotification)=> row.text.includes(props.searchWord)).reverse().slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              if (row.isNew && setting.autoReadNotification) setTimeout(() => dispatch(readNotification(row.id, props.category)), 100)\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id} \r\n                className={row.isNew ? classes.isNew : \"\"}\r\n                onClick={()=>dispatch(readNotification(row.id, props.category))}\r\n                >\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align} style={{ minWidth: column.minWidth, wordBreak: \"normal\" }}>\r\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                  \r\n                </TableRow>\r\n              );\r\n            })}\r\n            {notifications.length === 0 ? <TableRow><TableCell colSpan={2} align=\"center\"><strong>消息列表为空</strong></TableCell></TableRow> : null}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        labelRowsPerPage=\"每页显示信息\"\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={notifications.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Graph\\TextWithGraph.tsx",["199","200","201"],"import React, { useEffect } from 'react';\r\nimport { Paper, Card } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport * as d3 from 'd3' \r\nimport { TwoDimensionData } from '../../redux/types';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    root: {\r\n        position:\"relative\",\r\n        width:300,\r\n        height:250,\r\n        [theme.breakpoints.down('md')]: {\r\n            width: 200,\r\n            height: 200,\r\n        },\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: 140,\r\n            height: 200,\r\n        },\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    title: {\r\n        position:\"absolute\",\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(2),\r\n        alignSelf:\"flex-start\",\r\n    },\r\n    number: {\r\n        position:\"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        zIndex:1,\r\n        //background:\"rgba(255,255,255,0.5)\",\r\n        //backdropFilter: \"blur(1px)\"\r\n    },\r\n    graph: {\r\n        position:\"absolute\",\r\n        top: 50,\r\n        left:0\r\n        \r\n    }\r\n}))\r\nconst TextWithGraph = (props: {title: string, data: number[]}) => {\r\n    const classes = useStyle()\r\n    const {title, data} = props\r\n    console.log(data)\r\n\r\n    useEffect(() => {\r\n              \r\n        const clientWidth = window.innerWidth\r\n        let width;\r\n        let height;\r\n        if (clientWidth < 300) {\r\n            width = 140\r\n            height = 150\r\n        } else if (clientWidth < 1280) {\r\n            width = 200\r\n            height = 150\r\n        } else {\r\n            width = 300\r\n            height = 200\r\n        }\r\n  \r\n        const padding = {\r\n            top: 10,\r\n            right: 10,\r\n            bottom: 10,\r\n            left: 10,\r\n        }\r\n        d3.select(`#graph-${title}-svg`).remove()\r\n        const svg = d3.select(`#graph-${title}`)\r\n            .append('svg')\r\n            .attr('id',`graph-${title}-svg`)\r\n            .attr('width', width + 'px')\r\n            .attr('height', height + 'px');\r\n        \r\n        const maxData = d3.max(data)\r\n        const minData = d3.min(data)\r\n\r\n        if (maxData !== undefined && minData !== undefined) {\r\n            const xScale = d3.scaleLinear()\r\n                .domain([0, data.length-1])\r\n                .range([0, width - padding.left - padding.right]);\r\n            const yScale = d3.scaleLinear()\r\n                .domain([minData, maxData])\r\n                .range([height - padding.top - padding.bottom, 0]);\r\n            const xAxis = d3.axisBottom(xScale).tickValues([])\r\n            const yAxis = d3.axisLeft(yScale).tickValues([])\r\n            svg.append('g')\r\n                .attr('class', 'axis')\r\n                .attr('transform', 'translate(' + padding.left + ',' + (height - padding.bottom) + ')')\r\n                .call(xAxis)\r\n                .call(g => g.select(\".domain\").remove())\r\n            svg.append('g')\r\n                .attr('class', 'axis')\r\n                .attr('transform', 'translate(' + padding.left + ',' + padding.top + ')')\r\n                .call(yAxis)\r\n                .call(g => g.select(\".domain\").remove())\r\n            \r\n            const linePath = d3.line<number>()\r\n                .x((d,i) => xScale(i))\r\n                .y((d) => yScale(d))\r\n                .curve(d3.curveBasis); \r\n            console.log(data)\r\n            \r\n            svg.append('path')\r\n                .datum(data)\r\n                .attr('class', 'line-path')\r\n                .attr('transform', 'translate(' + padding.left + ',' + padding.top + ')')\r\n                .attr('d', linePath)\r\n                .attr('fill', 'none')\r\n                .attr('stroke-width', 3)\r\n                .attr('stroke', 'rgba(0,255,0,0.2)');\r\n        } \r\n\r\n    }, [data])\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <Typography variant=\"h6\" className={classes.title}>{title}</Typography>\r\n            <Typography  className={classes.number} variant=\"h3\">{data[data.length - 1]}</Typography>\r\n            <div className={classes.graph} id={`graph-${title}`}></div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default TextWithGraph","D:\\niuniu\\niu-ts\\my-app\\src\\component\\Button\\ThreeDButton.tsx",["202","203"],"D:\\niuniu\\niu-ts\\my-app\\src\\component\\Counter\\SimpleCounter.tsx",["204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219"],{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":2,"column":8,"nodeType":"226","messageId":"227","endLine":2,"endColumn":12},{"ruleId":"228","severity":1,"message":"229","line":21,"column":6,"nodeType":"230","endLine":21,"endColumn":8,"suggestions":"231"},{"ruleId":"224","severity":1,"message":"232","line":1,"column":23,"nodeType":"226","messageId":"227","endLine":1,"endColumn":38},{"ruleId":"224","severity":1,"message":"233","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":36},{"ruleId":"224","severity":1,"message":"234","line":3,"column":19,"nodeType":"226","messageId":"227","endLine":3,"endColumn":27},{"ruleId":"224","severity":1,"message":"235","line":3,"column":22,"nodeType":"226","messageId":"227","endLine":3,"endColumn":30},{"ruleId":"224","severity":1,"message":"236","line":8,"column":10,"nodeType":"226","messageId":"227","endLine":8,"endColumn":14},{"ruleId":"224","severity":1,"message":"237","line":31,"column":12,"nodeType":"226","messageId":"227","endLine":31,"endColumn":20},{"ruleId":"224","severity":1,"message":"238","line":31,"column":22,"nodeType":"226","messageId":"227","endLine":31,"endColumn":31},{"ruleId":"224","severity":1,"message":"239","line":1,"column":42,"nodeType":"226","messageId":"227","endLine":1,"endColumn":49},{"ruleId":"224","severity":1,"message":"240","line":3,"column":21,"nodeType":"226","messageId":"227","endLine":3,"endColumn":31},{"ruleId":"224","severity":1,"message":"241","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":21},{"ruleId":"224","severity":1,"message":"242","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":26},{"ruleId":"224","severity":1,"message":"243","line":3,"column":33,"nodeType":"226","messageId":"227","endLine":3,"endColumn":46},{"ruleId":"224","severity":1,"message":"244","line":3,"column":48,"nodeType":"226","messageId":"227","endLine":3,"endColumn":57},{"ruleId":"224","severity":1,"message":"234","line":8,"column":10,"nodeType":"226","messageId":"227","endLine":8,"endColumn":18},{"ruleId":"224","severity":1,"message":"245","line":6,"column":29,"nodeType":"226","messageId":"227","endLine":6,"endColumn":38},{"ruleId":"224","severity":1,"message":"246","line":8,"column":10,"nodeType":"226","messageId":"227","endLine":8,"endColumn":14},{"ruleId":"224","severity":1,"message":"247","line":11,"column":25,"nodeType":"226","messageId":"227","endLine":11,"endColumn":43},{"ruleId":"248","severity":1,"message":"249","line":56,"column":13,"nodeType":"250","messageId":"251","endLine":56,"endColumn":43},{"ruleId":"248","severity":1,"message":"249","line":96,"column":21,"nodeType":"250","messageId":"251","endLine":96,"endColumn":51},{"ruleId":"228","severity":1,"message":"252","line":121,"column":8,"nodeType":"230","endLine":121,"endColumn":10,"suggestions":"253"},{"ruleId":"228","severity":1,"message":"254","line":132,"column":8,"nodeType":"230","endLine":132,"endColumn":30,"suggestions":"255"},{"ruleId":"228","severity":1,"message":"256","line":149,"column":8,"nodeType":"230","endLine":149,"endColumn":25,"suggestions":"257"},{"ruleId":"228","severity":1,"message":"229","line":158,"column":8,"nodeType":"230","endLine":158,"endColumn":25,"suggestions":"258"},{"ruleId":"224","severity":1,"message":"259","line":11,"column":10,"nodeType":"226","messageId":"227","endLine":11,"endColumn":23},{"ruleId":"224","severity":1,"message":"260","line":13,"column":26,"nodeType":"226","messageId":"227","endLine":13,"endColumn":42},{"ruleId":"224","severity":1,"message":"261","line":14,"column":8,"nodeType":"226","messageId":"227","endLine":14,"endColumn":16},{"ruleId":"224","severity":1,"message":"262","line":15,"column":10,"nodeType":"226","messageId":"227","endLine":15,"endColumn":20},{"ruleId":"224","severity":1,"message":"263","line":79,"column":7,"nodeType":"226","messageId":"227","endLine":79,"endColumn":22},{"ruleId":"224","severity":1,"message":"264","line":3,"column":10,"nodeType":"226","messageId":"227","endLine":3,"endColumn":21},{"ruleId":"224","severity":1,"message":"265","line":37,"column":11,"nodeType":"226","messageId":"227","endLine":37,"endColumn":15},{"ruleId":"224","severity":1,"message":"266","line":40,"column":25,"nodeType":"226","messageId":"227","endLine":40,"endColumn":39},{"ruleId":"224","severity":1,"message":"267","line":42,"column":27,"nodeType":"226","messageId":"227","endLine":42,"endColumn":43},{"ruleId":"224","severity":1,"message":"268","line":44,"column":26,"nodeType":"226","messageId":"227","endLine":44,"endColumn":41},{"ruleId":"224","severity":1,"message":"269","line":46,"column":26,"nodeType":"226","messageId":"227","endLine":46,"endColumn":41},{"ruleId":"224","severity":1,"message":"270","line":48,"column":28,"nodeType":"226","messageId":"227","endLine":48,"endColumn":45},{"ruleId":"224","severity":1,"message":"271","line":50,"column":25,"nodeType":"226","messageId":"227","endLine":50,"endColumn":39},{"ruleId":"224","severity":1,"message":"272","line":52,"column":26,"nodeType":"226","messageId":"227","endLine":52,"endColumn":41},{"ruleId":"224","severity":1,"message":"273","line":54,"column":25,"nodeType":"226","messageId":"227","endLine":54,"endColumn":39},{"ruleId":"224","severity":1,"message":"239","line":16,"column":16,"nodeType":"226","messageId":"227","endLine":16,"endColumn":23},{"ruleId":"224","severity":1,"message":"274","line":16,"column":25,"nodeType":"226","messageId":"227","endLine":16,"endColumn":29},{"ruleId":"224","severity":1,"message":"275","line":14,"column":44,"nodeType":"226","messageId":"227","endLine":14,"endColumn":55},{"ruleId":"276","severity":1,"message":"277","line":468,"column":45,"nodeType":"278","messageId":"279","endLine":468,"endColumn":47},{"ruleId":"224","severity":1,"message":"280","line":2,"column":8,"nodeType":"226","messageId":"227","endLine":2,"endColumn":12},{"ruleId":"224","severity":1,"message":"281","line":6,"column":8,"nodeType":"226","messageId":"227","endLine":6,"endColumn":25},{"ruleId":"224","severity":1,"message":"282","line":10,"column":8,"nodeType":"226","messageId":"227","endLine":10,"endColumn":15},{"ruleId":"224","severity":1,"message":"283","line":11,"column":8,"nodeType":"226","messageId":"227","endLine":11,"endColumn":22},{"ruleId":"224","severity":1,"message":"239","line":17,"column":10,"nodeType":"226","messageId":"227","endLine":17,"endColumn":17},{"ruleId":"224","severity":1,"message":"274","line":17,"column":19,"nodeType":"226","messageId":"227","endLine":17,"endColumn":23},{"ruleId":"224","severity":1,"message":"275","line":17,"column":59,"nodeType":"226","messageId":"227","endLine":17,"endColumn":70},{"ruleId":"224","severity":1,"message":"247","line":31,"column":51,"nodeType":"226","messageId":"227","endLine":31,"endColumn":69},{"ruleId":"228","severity":1,"message":"284","line":251,"column":6,"nodeType":"230","endLine":251,"endColumn":12,"suggestions":"285"},{"ruleId":"224","severity":1,"message":"266","line":40,"column":25,"nodeType":"226","messageId":"227","endLine":40,"endColumn":39},{"ruleId":"224","severity":1,"message":"267","line":42,"column":27,"nodeType":"226","messageId":"227","endLine":42,"endColumn":43},{"ruleId":"224","severity":1,"message":"268","line":44,"column":26,"nodeType":"226","messageId":"227","endLine":44,"endColumn":41},{"ruleId":"224","severity":1,"message":"269","line":46,"column":26,"nodeType":"226","messageId":"227","endLine":46,"endColumn":41},{"ruleId":"224","severity":1,"message":"270","line":48,"column":28,"nodeType":"226","messageId":"227","endLine":48,"endColumn":45},{"ruleId":"224","severity":1,"message":"271","line":50,"column":25,"nodeType":"226","messageId":"227","endLine":50,"endColumn":39},{"ruleId":"224","severity":1,"message":"272","line":52,"column":26,"nodeType":"226","messageId":"227","endLine":52,"endColumn":41},{"ruleId":"224","severity":1,"message":"273","line":54,"column":25,"nodeType":"226","messageId":"227","endLine":54,"endColumn":39},{"ruleId":"224","severity":1,"message":"286","line":2,"column":8,"nodeType":"226","messageId":"227","endLine":2,"endColumn":16},{"ruleId":"224","severity":1,"message":"282","line":7,"column":8,"nodeType":"226","messageId":"227","endLine":7,"endColumn":15},{"ruleId":"224","severity":1,"message":"287","line":8,"column":8,"nodeType":"226","messageId":"227","endLine":8,"endColumn":18},{"ruleId":"224","severity":1,"message":"240","line":16,"column":8,"nodeType":"226","messageId":"227","endLine":16,"endColumn":18},{"ruleId":"224","severity":1,"message":"288","line":3,"column":8,"nodeType":"226","messageId":"227","endLine":3,"endColumn":13},{"ruleId":"224","severity":1,"message":"288","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":15},{"ruleId":"224","severity":1,"message":"289","line":6,"column":10,"nodeType":"226","messageId":"227","endLine":6,"endColumn":26},{"ruleId":"228","severity":1,"message":"290","line":119,"column":8,"nodeType":"230","endLine":119,"endColumn":14,"suggestions":"291"},{"ruleId":"224","severity":1,"message":"292","line":57,"column":12,"nodeType":"226","messageId":"227","endLine":57,"endColumn":22},{"ruleId":"224","severity":1,"message":"293","line":57,"column":24,"nodeType":"226","messageId":"227","endLine":57,"endColumn":37},{"ruleId":"224","severity":1,"message":"294","line":6,"column":10,"nodeType":"226","messageId":"227","endLine":6,"endColumn":18},{"ruleId":"224","severity":1,"message":"295","line":6,"column":20,"nodeType":"226","messageId":"227","endLine":6,"endColumn":33},{"ruleId":"224","severity":1,"message":"296","line":31,"column":7,"nodeType":"226","messageId":"227","endLine":31,"endColumn":17},{"ruleId":"224","severity":1,"message":"297","line":42,"column":12,"nodeType":"226","messageId":"227","endLine":42,"endColumn":17},{"ruleId":"224","severity":1,"message":"298","line":42,"column":19,"nodeType":"226","messageId":"227","endLine":42,"endColumn":27},{"ruleId":"224","severity":1,"message":"299","line":43,"column":12,"nodeType":"226","messageId":"227","endLine":43,"endColumn":17},{"ruleId":"224","severity":1,"message":"300","line":43,"column":19,"nodeType":"226","messageId":"227","endLine":43,"endColumn":27},{"ruleId":"224","severity":1,"message":"301","line":44,"column":12,"nodeType":"226","messageId":"227","endLine":44,"endColumn":19},{"ruleId":"224","severity":1,"message":"302","line":44,"column":21,"nodeType":"226","messageId":"227","endLine":44,"endColumn":31},{"ruleId":"224","severity":1,"message":"303","line":45,"column":12,"nodeType":"226","messageId":"227","endLine":45,"endColumn":19},{"ruleId":"224","severity":1,"message":"304","line":45,"column":21,"nodeType":"226","messageId":"227","endLine":45,"endColumn":31},{"ruleId":"224","severity":1,"message":"305","line":46,"column":12,"nodeType":"226","messageId":"227","endLine":46,"endColumn":19},{"ruleId":"224","severity":1,"message":"306","line":46,"column":21,"nodeType":"226","messageId":"227","endLine":46,"endColumn":31},{"ruleId":"224","severity":1,"message":"307","line":47,"column":12,"nodeType":"226","messageId":"227","endLine":47,"endColumn":19},{"ruleId":"224","severity":1,"message":"308","line":47,"column":21,"nodeType":"226","messageId":"227","endLine":47,"endColumn":31},{"ruleId":"228","severity":1,"message":"229","line":71,"column":8,"nodeType":"230","endLine":71,"endColumn":35,"suggestions":"309"},"no-native-reassign",["310"],"no-negated-in-lhs",["311"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["312"],"'combineReducers' is defined but never used.","'NotificationImportantSharp' is defined but never used.","'IStudent' is defined but never used.","'useTheme' is defined but never used.","'grey' is defined but never used.","'isActive' is assigned a value but never used.","'setActive' is assigned a value but never used.","'Divider' is defined but never used.","'Typography' is defined but never used.","'ScrollCounter' is defined but never used.","'useEffect' is defined but never used.","'OutlinedInput' is defined but never used.","'TextField' is defined but never used.","'Draggable' is defined but never used.","'Card' is defined but never used.","'clearSelectedEvent' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","React Hook useEffect has missing dependencies: 'dispatch' and 'events'. Either include them or remove the dependency array.",["313"],"React Hook useEffect has missing dependencies: 'dispatch' and 'event.eventInfo'. Either include them or remove the dependency array.",["314"],"React Hook useEffect has missing dependencies: 'dispatch', 'events', and 'selectedEId'. Either include them or remove the dependency array.",["315"],["316"],"'INotification' is defined but never used.","'NotificationKeys' is defined but never used.","'Schedule' is defined but never used.","'LabelSharp' is defined but never used.","'NotificationRow' is assigned a value but never used.","'useSnackbar' is defined but never used.","'data' is assigned a value but never used.","'setNameMessage' is assigned a value but never used.","'setGenderMessage' is assigned a value but never used.","'setPhoneMessage' is assigned a value but never used.","'setEmailMessage' is assigned a value but never used.","'setAddressMessage' is assigned a value but never used.","'setYearMessage' is assigned a value but never used.","'setMonthMessage' is assigned a value but never used.","'setDateMessage' is assigned a value but never used.","'Grid' is defined but never used.","'FilledInput' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'clsx' is defined but never used.","'DialogContentText' is defined but never used.","'AddIcon' is defined but never used.","'FormHelperText' is defined but never used.","React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.",["317"],"'MenuItem' is defined but never used.","'RemoveIcon' is defined but never used.","'Paper' is defined but never used.","'TwoDimensionData' is defined but never used.","React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",["318"],"'buttonText' is assigned a value but never used.","'setButtonText' is assigned a value but never used.","'dispatch' is defined but never used.","'tickIncrement' is defined but never used.","'DigitBlock' is assigned a value but never used.","'hour1' is assigned a value but never used.","'setHour1' is assigned a value but never used.","'hour2' is assigned a value but never used.","'setHour2' is assigned a value but never used.","'minute1' is assigned a value but never used.","'setMinute1' is assigned a value but never used.","'minute2' is assigned a value but never used.","'setMinute2' is assigned a value but never used.","'second1' is assigned a value but never used.","'setSecond1' is assigned a value but never used.","'second2' is assigned a value but never used.","'setSecond2' is assigned a value but never used.",["319"],"no-global-assign","no-unsafe-negation",{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},"Update the dependencies array to be: [dispatch]",{"range":"336","text":"337"},"Update the dependencies array to be: [dispatch, events]",{"range":"338","text":"339"},"Update the dependencies array to be: [dispatch, event.eventInfo, event.updateCalendar]",{"range":"340","text":"341"},"Update the dependencies array to be: [dispatch, events, hasEdittedEvent, selectedEId]",{"range":"342","text":"343"},"Update the dependencies array to be: [dispatch, hasDeletedEvent]",{"range":"344","text":"345"},"Update the dependencies array to be: [open, reset]",{"range":"346","text":"347"},"Update the dependencies array to be: [data, title]",{"range":"348","text":"349"},"Update the dependencies array to be: [courseCounter.shouldReset, dispatch]",{"range":"350","text":"351"},[601,603],"[dispatch]",[5000,5002],"[dispatch, events]",[5295,5317],"[dispatch, event.eventInfo, event.updateCalendar]",[6153,6170],"[dispatch, events, hasEdittedEvent, selectedEId]",[6501,6518],"[dispatch, hasDeletedEvent]",[7372,7378],"[open, reset]",[3844,3850],"[data, title]",[1904,1931],"[courseCounter.shouldReset, dispatch]"]